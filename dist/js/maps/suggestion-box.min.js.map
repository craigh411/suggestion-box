{"version":3,"sources":["suggestion-box.js"],"names":["$","fn","suggestionBox","options","doClick","e","settings","onClick","isSuggestion","target","parents","length","nodeName","select","position","scroll","selectedHref","$suggestionBox","find","attr","addClass","doScroll","unselect","removeClass","resetSelection","selectedLi","to","autoScrolled","pos","top","scrollTo","scrollTop","moveDown","listSize","size","moveUp","goToSelection","window","location","getSuggestions","url","ajaxCalledVal","$searchBox","val","ajax","data","request","dataType","success","selectionHasChanged","currentLi","jsonData","results","JSON","stringify","setJsonData","showSuggestions","ajaxSuccess","error","ajaxError","getSelectionMouseIsOver","$parentLi","parent","children","index","setSuggestionBoxPosition","borders","getCssValue","padding","css","left","offset","leftOffset","height","topOffset","element","name","parseInt","replace","hideSuggestionBox","fadeOut","adjustBorderRadius","searchBoxBorderRadius","bottomLeft","bottomRight","onHide","showSuggestionBox","fadeIn","onShow","setSuggestionBoxWidth","searchBoxWidth","getSearchBoxWidth","widthAdjustment","menuWidth","min-width","width","createAttributes","value","each","key","keys","Object","i","createCustomValues","$suggestions","customValues","custom","createSuggestionsList","heading","suggestion","matches","getNoSuggestionMarkup","html","noSuggestionsMessage","forceShow","filterResults","active","showNoSuggestionsMessage","json","parseJSON","sort","loadJson","console","log","filterPattern","regex","RegExp","grep","test","this","extend","delay","filter","paramName","scrollable","randId","Math","floor","random","append","ENTER_KEY","UP_ARROW_KEY","DOWN_ARROW_KEY","ESCAPE_KEY","mouseHover","timer","on","mousemove","mouseout","focus","click","preventDefault","blur","keyup","which","clearTimeout","setTimeout","keydown","paste","resize","addSuggestions","loadSuggestions","getJson","selectedUrl","selectedSuggestion","text","reset","show","force","hide","ms","pattern","sortFunc","action","getId","withHash","reservedKey","destroy","unbind","remove","jQuery"],"mappings":"CAAC,SAAUA,GAEHA,EAAEC,GAAGC,cAAgB,SAAUC,GAwM3B,QAASC,GAAQC,GACbC,EAASC,QAAQF,GAQrB,QAASG,GAAaH,GAClB,MAAOL,GAAEK,EAAEI,QAAQC,QAAQ,KAAKC,OAAS,GAA2B,MAAtBN,EAAEI,OAAOG,SAO3D,QAASC,GAAOC,EAAUC,GACtBC,EAAeC,EAAeC,KAAK,SAAWJ,EAAW,OAAOK,KAAK,QACrEF,EAAeC,KAAK,SAAWJ,EAAW,KAAKM,SAAS,YAEpDL,GACAM,EAASP,GAQjB,QAASQ,GAASR,GACdG,EAAeC,KAAK,SAAWJ,EAAW,KAAKS,YAAY,YAM/D,QAASC,KACLR,EAAe,IACfS,EAAa,GAEbR,EAAeC,KAAK,MAAMK,YAAY,YAQ1C,QAASF,GAASK,GAGd,GAFAC,GAAe,EAEXD,EAAK,GACL,GAAIE,GAAMX,EAAeC,KAAK,SAAWQ,EAAK,KAAKZ,WAAWe,IAC1DZ,EAAeC,KAAK,YAAYJ,WAAWe,GAInD,IAAIC,GAAYJ,EAAK,GAAME,EAAM,CACjCX,GAAec,UAAUD,GAM7B,QAASE,GAASjB,GACd,GAAIkB,GAAWhB,EAAeC,KAAK,MAAMgB,MAErCT,KAAgBQ,EAAW,GAC3BX,EAASG,GACTD,MAEAF,EAASG,GACTA,IACAZ,EAAOY,IAGPV,GACAM,EAASI,GAOjB,QAASU,GAAOpB,GACRU,EAAa,GACbH,EAASG,GACTA,IACAZ,EAAOY,IACc,IAAdA,GACPH,EAASG,GACTA,EAAaR,EAAeC,KAAK,MAAMgB,OAAS,EAChDrB,EAAOY,KAEPH,EAAS,GACTE,KAGAT,GACAM,EAASI,GAOjB,QAASW,KACLC,OAAOC,SAAWtB,EAOtB,QAASuB,GAAeC,GACpBC,EAAgBC,EAAWC,MAC3B3C,EAAE4C,MACEJ,IAAKA,EACLK,KAAMC,EACNC,SAAU,OACVC,QAAS,SAAUH,GAEf,GAAII,IAAsB,EACtBC,EAAYzB,CAEZ0B,GAASC,SAAWP,EAAKO,UACzBH,EAAuBI,KAAKC,UAAUH,EAASC,QAAQ3B,MAAiB4B,KAAKC,UAAUT,EAAKO,QAAQ3B,KAGxG8B,EAAYV,GACZW,IAIIN,EAAY,IAAOR,EAAWC,QAAUF,IAAmBQ,IAC3DxB,EAAayB,EACbrC,EAAOY,IAGXnB,EAASmD,YAAYZ,IAEzBa,MAAO,SAAUrD,GACbC,EAASqD,UAAUtD,MAU/B,QAASuD,GAAwBvD,GAC7B,GAAIwD,GAAY7D,EAAEK,EAAEI,QAAQC,QAAQ,KACpC,OAAOmD,GAAUC,SAASC,WAAWC,MAAMH,GAM/C,QAASI,KACL,GAAIC,GAAUC,EAAYzB,EAAY,uBAAyByB,EAAYzB,EAAY,oBACnF0B,EAAUD,EAAYzB,EAAY,kBAAoByB,EAAYzB,EAAY,cAElFzB,GAAeoD,KACXvD,SAAY,WACZwD,KAAS5B,EAAW6B,SAAa,KAAIjE,EAASkE,WAC9C3C,IAAQa,EAAW6B,SAAY,KAAK7B,EAAW+B,SAAWP,EAAUE,EAAU9D,EAASoE,aAU/F,QAASP,GAAYQ,EAASC,GAC1B,MAAOC,UAASF,EAAQN,IAAIO,GAAME,QAAQ,KAAM,KAMpD,QAASC,KACL9D,EAAec,UAAU,GAErBzB,EAAS0E,QACT/D,EAAe+D,UAEf/D,EAAeoD,IAAI,UAAW,QAElC7C,IAEIlB,EAAS2E,qBACTvC,EAAW2B,IAAI,4BAA6Ba,EAAsBC,YAClEzC,EAAW2B,IAAI,6BAA8Ba,EAAsBE,cAGvE9E,EAAS+E,SAMb,QAASC,KACDhF,EAASiF,OACTtE,EAAesE,SAEftE,EAAeoD,IAAI,UAAW,SAG9B/D,EAAS2E,qBACTvC,EAAW2B,IAAI,4BAA6B,GAC5C3B,EAAW2B,IAAI,6BAA8B,IAGjD/D,EAASkF,SAOb,QAASC,KACL,GAAIC,GAAiBC,IAAsBrF,EAASsF,eAC1B,SAAtBtF,EAASuF,UACT5E,EAAeoD,KACXyB,YAAaJ,IAEY,aAAtBpF,EAASuF,WAChB5E,EAAeoD,KACX0B,MAASL,IASrB,QAASC,KACL,MACIjD,GAAWqD,QACX5B,EAAYzB,EAAY,qBACxByB,EAAYzB,EAAY,sBACxByB,EAAYzB,EAAY,gBACxByB,EAAYzB,EAAY,iBAUhC,QAASsD,GAAiBC,EAAO9E,GAO7B,MANAnB,GAAEkG,KAAKD,EAAM9E,KAAM,SAAUgF,EAAKF,GAE9B,IAAK,GADDG,GAAOC,OAAOD,KAAKH,GACdK,EAAI,EAAGA,EAAIF,EAAKzF,OAAQ2F,IAC7BnF,GAAQiF,EAAKE,GAAK,KAAOL,EAAMG,EAAKE,IAAM,OAG3CnF,EASX,QAASoF,GAAmBN,EAAOO,GAC/B,IAAK,GAAIF,GAAI,EAAGA,EAAIhG,EAASmG,aAAa9F,OAAQ2F,IAAK,CACnD,GAAII,GAAST,EAAM3F,EAASmG,aAAaH,GACrCI,KACAF,GAAgBP,EAAM3F,EAASmG,aAAaH,KAGpD,MAAOE,GAQX,QAASG,GAAsB9D,GAC3B,GAAI2D,GAAe,kCAAoClG,EAASsG,QAAU,yCAwB1E,OArBA5G,GAAEkG,KAAKrD,EAAKO,QAAS,SAAU+C,EAAKF,GAChC,IAAIA,EAAMY,aAAcZ,EAAMzD,IAU1B,OAAO,CATPsE,IAAU,CACV,IAAI3F,GAAO,EAYf,OAXQ8E,GAAM9E,OACNA,EAAO6E,EAAiBC,EAAO9E,IAEnCqF,GAAgB,gBAAkBP,EAAMzD,IAAM,KAAOrB,EAAO,IAAM8E,EAAMY,WACxEL,EAAeD,EAAmBN,EAAOO,GACzCA,GAAgB,YAMhBL,IAAS7F,EAAS8C,QAAU,GACrB,EADX,SAIJoD,GAAgB,QAKpB,QAASO,KACL9F,EAAe+F,KAAK,+BAAiC1G,EAAS2G,qBAAuB,UAMzF,QAASzD,GAAgB0D,GACrB1F,IAEAsF,GAAU,CAEV,IAAIjE,GAAQvC,EAAe,OAAI6G,EAAczE,EAAWC,OAASQ,CAEjE,IAAIN,GACIA,EAAKO,QACL,GAAIoD,GAAeG,EAAsB9D,EAK7CuE,IAAUF,EACNJ,GAEA7F,EAAe+F,KAAKR,GACpBf,IACAH,KACO4B,GAEH5G,EAAS+G,0BACTN,IAEJtB,IACAH,KACOhF,EAAS+G,0BAA4B3E,EAAWC,MAAMhC,OAAS,GAEtE8E,IACAH,IACAyB,KAGAhC,IAIJA,IAQR,QAASxB,GAAY+D,GAEbnE,EADAmE,EACYA,YAAgBjB,QAAUiB,EAAOtH,EAAEuH,UAAUD,MAKzDhH,EAASkH,MAAQrE,EAASC,SAC1BD,EAASC,QAAQoE,KAAKlH,EAASkH,MASvC,QAASC,GAASjF,GACdxC,EAAE4C,MACEJ,IAAKA,EACLO,SAAU,OACVC,QAAS,SAAUH,GACfU,EAAYV,IAEhBa,MAAO,SAAUrD,GACbqH,QAAQC,IAAItH,MAUxB,QAAS8G,GAAclB,GACnB,GAAIpD,EAKJ,IAHAoD,EAAQA,EAAMnB,QAAQ,yBAA0B,QAChD8C,cAAgBtH,EAASsH,cAAc9C,QAAQ,UAAWmB,IAErDA,EAED,QAEJ,IAAI9C,GACIA,EAASC,QAAS,CAElB,GAAIyE,GAAQ,GAAIC,QAAOF,cAAe,IACtC/E,GAAO7C,EAAE+H,KAAK5E,EAASC,QAAS,SAAUwB,GACtC,MAAOiD,GAAMG,KAAKpD,EAAKiC,cAK/BvG,EAASkH,MACT3E,EAAK2E,KAAKlH,EAASkH,KAGvB,IAAIF,GAAOjE,KAAKC,WAAWF,QAAWP,GAEtC,OAAO7C,GAAEuH,UAAUD,GArnBvB,GAAI5E,GAAauF,KAEb3H,EAAWN,EAAEkI,QAETxD,UAAW,EACXF,WAAY,EACZoB,gBAAiB,EACjBuC,MAAO,IACPvB,QAAS,cACTxD,QAAS,GACTmC,QAAQ,EACRP,SAAS,EACTa,UAAW,OACXwB,0BAA0B,EAC1BJ,qBAAsB,uBACtBmB,QAAQ,EACRR,cAAe,YACf3C,oBAAoB,EACpBtB,UAAW,SAAUtD,GACjBqH,QAAQC,IAAItH,IAEhBoD,YAAa,SAAUZ,KAEvBtC,QAAS,SAAUF,GACf+B,IACA2C,IACArC,EAAWC,IAAI,KAEnB6C,OAAQ,aAERH,OAAQ,aAERgD,UAAW,SACX5B,gBACA6B,YAAY,GAEhBnI,GAEAc,EAAiB,KACjBsH,EAAS,MAKb,WAEIA,EAAS,kBAAoBC,KAAKC,MAAsB,IAAhBD,KAAKE,UAE7C1I,EAAE,QAAQ2I,OAAO,YAAcJ,EAAS,mCAExCtH,EAAiBjB,EAAE,IAAMuI,GACzBtE,IAEI3D,EAASmE,QACTxD,EAAeoD,IAAI,aAAc/D,EAASmE,QAE1CnE,EAASgI,YACTrH,EAAeoD,IAAI,WAAY,QAInC3B,EAAWvB,KAAK,eAAgB,SAKpC,IAwBIsB,GAxBAmG,EAAY,GACZC,EAAe,GACfC,EAAiB,GACjBC,EAAa,GAGbtH,EAAa,GACbT,EAAe,IAGfgI,GAAa,EAEbC,EAAQ,KAERnC,GAAU,EAEVM,GAAS,EAETzF,GAAe,EAEfmB,KACAK,KAIA+B,GACAC,WAAYzC,EAAW2B,IAAI,6BAC3Be,YAAa1C,EAAW2B,IAAI,8BA4hBhC,OAxhBApD,GAAeiI,IACXC,UAAW,SAAU9I,GACbG,EAAaH,KAAOsB,IACpBL,EAASG,GACTA,EAAamC,EAAwBvD,GACrCQ,EAAOY,IAGXuH,GAAa,EACbrH,GAAe,GAEnByH,SAAU,SAAU/I,GACZG,EAAaH,KAAOsB,GACpBL,EAASG,GACTD,KACOxB,EAAE,UAAUmB,KAAK,QAAUuB,EAAWvB,KAAK,OAElDuB,EAAW2G,QAEfL,GAAa,GAEjBM,MAAO,SAAUjJ,GACTG,EAAaH,KACbA,EAAEkJ,iBACFnJ,EAAQC,OAKpBqC,EAAWwG,IACPM,KAAM,WACFpC,GAAS,EACJ4B,GACDjE,KAGRsE,MAAO,WACHjC,GAAS,EACLpH,EAAEiI,MAAMtF,OACRa,EAAgBL,IAGxBsG,MAAO,SAAUpJ,GAETA,EAAEqJ,QAAUb,GAAgBxI,EAAEqJ,QAAUZ,GAAkBzI,EAAEqJ,QAAUX,GAAc1I,EAAEqJ,QAAUd,IAC5FtI,EAASkC,MACThB,IACIyH,GACAU,aAAaV,GAIjBnG,EAAQxC,EAAS+H,WAAa3F,EAAWC,MACzCsG,EAAQW,WAAW,WACfrH,EAAejC,EAASkC,MACzBlC,EAAS6H,QAIZ7H,EAAS8H,QACT5E,MAIZqG,QAAS,SAAUxJ,GACuB,SAAlCY,EAAeoD,IAAI,aACfhE,EAAEqJ,OAASZ,IACXzI,EAAEkJ,iBACFvH,GAAS,IAET3B,EAAEqJ,OAASb,IACXxI,EAAEkJ,iBACFpH,GAAO,IAEP9B,EAAEqJ,QAAUd,GAAanH,EAAa,KACtCpB,EAAEkJ,iBACFtI,EAAeC,KAAK,eAAeoI,SAEnCjJ,EAAEqJ,OAASX,IACX1I,EAAEkJ,iBACFxE,OAIZ+E,MAAO,WAEHF,WAAW,WACPlH,EAAW+G,SACZ,QAKXzJ,EAAEqC,QAAQ0H,OAAO,WACb9F,OA2bA1B,eAAgB,SAAUC,GAEtB,MADAD,GAAeC,GACRyF,MAEX+B,eAAgB,SAAU1C,GAEtB,MADA/D,GAAY+D,GACLW,MAEXgC,gBAAiB,SAAUzH,GAEvB,MADAiF,GAASjF,GACFyF,MAEXiC,QAAS,WACL,MAAO7G,MAAKC,UAAUH,IAE1BhB,OAAQ,WAEJ,MADAA,KACO8F,MAEXjG,SAAU,WAEN,MADAA,KACOiG,MAEXkC,YAAa,WACT,MAAOnJ,IAEXoJ,mBAAoB,WAChB,MAAOnJ,GAAeC,KAAK,SAAWO,EAAa,KAAK4I,QAE5DvJ,SAAU,WACN,MAAOW,IAEXZ,OAAQ,SAAUC,GAId,MAHAQ,GAASG,GACTA,EAAaX,EACbD,EAAOC,EAAUR,EAASgI,YACnBL,MAEXqC,MAAO,WAGH,MAFAhJ,GAASG,GACTD,IACOyG,MAEXsC,KAAM,SAAUC,GAGZ,MAFAA,GAAQ,EAAUA,GAAQ,EAC1BhH,EAAgBgH,GACTvC,MAEXwC,KAAM,WAEF,MADA1F,KACOkD,MAEXzF,IAAK,SAAUA,GAEX,MADAlC,GAASkC,IAAMA,EACRyF,MAEX1C,OAAQ,SAAUA,GAEd,MADAjF,GAASiF,OAASA,EACX0C,MAEXjD,QAAS,SAAUA,GAEf,MADA1E,GAAS0E,QAAUA,EACZiD,MAEXE,MAAO,SAAUuC,GAEb,MADApK,GAAS6H,MAAQuC,EACVzC,MAEXrB,QAAS,SAAUA,GAEf,MADAtG,GAASsG,QAAUA,EACZqB,MAEX7E,QAAS,SAAUA,GAEf,MADA9C,GAAS8C,QAAUA,EACZ6E,MAEXtE,UAAW,SAAUA,GAEjB,MADArD,GAASqD,UAAYA,EACdsE,MAEXxE,YAAa,SAAUA,GAEnB,MADAnD,GAASmD,YAAcA,EAChBwE,MAEXG,OAAQ,SAAUA,GAEd,MADA9H,GAAS8H,OAASA,EACXH,MAEXL,cAAe,SAAU+C,GAErB,MADArK,GAASsH,cAAgB+C,EAClB1C,MAEXT,KAAM,SAAUoD,GAEZ,MADAtK,GAASkH,KAAOoD,EACT3C,MAEX1H,QAAS,SAAUsK,GAEf,MADAvK,GAASC,QAAUsK,EACZ5C,MAEX6C,MAAO,SAAUC,GACb,MAAO,GAAa,IAAMxC,EAASA,GAEvCyC,YAAa,SAAU3K,GACnB,GAAI8F,GAAM9F,EAAEqJ,KACZ,OAAOvD,KAAQyC,GAAazC,IAAQ4C,GAAc5C,IAAQ0C,GAAgB1C,IAAQ2C,GAEtFmC,QAAS,WAGL,MAFAvI,GAAWwI,OAAOjD,MAClBhH,EAAekK,SACR,SAIrBC","file":"suggestion-box.min.js","sourcesContent":["(function ($) {\r\n\r\n        $.fn.suggestionBox = function (options) {\r\n\r\n            var $searchBox = this;\r\n\r\n            var settings = $.extend({\r\n                    // default settings.\r\n                    topOffset: 0,\r\n                    leftOffset: 0,\r\n                    widthAdjustment: 0,\r\n                    delay: 400, // in ms\r\n                    heading: 'Suggestions',\r\n                    results: 10,\r\n                    fadeIn: true,\r\n                    fadeOut: false,\r\n                    menuWidth: 'auto',\r\n                    showNoSuggestionsMessage: false,\r\n                    noSuggestionsMessage: 'No Suggestions Found',\r\n                    filter: false,\r\n                    filterPattern: \"({INPUT})\",\r\n                    adjustBorderRadius: true,\r\n                    ajaxError: function (e) {\r\n                        console.log(e);\r\n                    },\r\n                    ajaxSuccess: function (data) {\r\n                    },\r\n                    onClick: function (e) {\r\n                        goToSelection();\r\n                        hideSuggestionBox();\r\n                        $searchBox.val('');\r\n                    },\r\n                    onShow: function () {\r\n                    },\r\n                    onHide: function () {\r\n                    },\r\n                    paramName: 'search',\r\n                    customValues: [],\r\n                    scrollable: false\r\n                },\r\n                options);\r\n\r\n            var $suggestionBox = null;\r\n            var randId = null;\r\n\r\n            /**\r\n             * Initialise the plugin\r\n             */\r\n            (function init() {\r\n                // Inject the suggestion box into the body of the web page\r\n                randId = 'suggestion-box-' + Math.floor(Math.random() * 10000000);\r\n                // Inject the suggestion box into the body of the web page\r\n                $('body').append('<div id=\"' + randId + '\" class=\"suggestion-box\"></div>');\r\n\r\n                $suggestionBox = $('#' + randId);\r\n                setSuggestionBoxPosition();\r\n\r\n                if (settings.height) {\r\n                    $suggestionBox.css('max-height', settings.height);\r\n                }\r\n                if (settings.scrollable) {\r\n                    $suggestionBox.css('overflow', 'auto');\r\n                }\r\n\r\n                // Turn off autocomplete\r\n                $searchBox.attr('autocomplete', 'off');\r\n            })();\r\n\r\n\r\n            // Constants for key values\r\n            var ENTER_KEY = 13;\r\n            var UP_ARROW_KEY = 38;\r\n            var DOWN_ARROW_KEY = 40;\r\n            var ESCAPE_KEY = 27;\r\n\r\n            // Default values for selected list item\r\n            var selectedLi = -1;\r\n            var selectedHref = '#';\r\n\r\n            // Is the mouse hovering over the suggestion box?\r\n            var mouseHover = false;\r\n            // Timer for only making ajax calls when the user stops typing\r\n            var timer = null;\r\n            // Did we get any suggestions?\r\n            var matches = false;\r\n            // Is the search box active (does it have focus)\r\n            var active = false;\r\n            // Whether or not the scroll action was done pragmatically\r\n            var autoScrolled = false;\r\n            // create a blank object for our request\r\n            var request = {};\r\n            var jsonData = {};\r\n\r\n            // The value of the input when ajax was called\r\n            var ajaxCalledVal;\r\n            var searchBoxBorderRadius = {\r\n                bottomLeft: $searchBox.css('border-bottom-left-radius'),\r\n                bottomRight: $searchBox.css('border-bottom-right-radius')\r\n            };\r\n\r\n\r\n            $suggestionBox.on({\r\n                mousemove: function (e) {\r\n                    if (isSuggestion(e) && !autoScrolled) {\r\n                        unselect(selectedLi);\r\n                        selectedLi = getSelectionMouseIsOver(e);\r\n                        select(selectedLi);\r\n                    }\r\n\r\n                    mouseHover = true;\r\n                    autoScrolled = false;\r\n                },\r\n                mouseout: function (e) {\r\n                    if (isSuggestion(e) && !autoScrolled) {\r\n                        unselect(selectedLi);\r\n                        resetSelection();\r\n                    } else if ($(':focus').attr('id') !== $searchBox.attr('id')) {\r\n                        // We're out of the suggestion box so re-focus on search\r\n                        $searchBox.focus();\r\n                    }\r\n                    mouseHover = false;\r\n                },\r\n                click: function (e) {\r\n                    if (isSuggestion(e)) {\r\n                        e.preventDefault();\r\n                        doClick(e);\r\n                    }\r\n                }\r\n            });\r\n\r\n            $searchBox.on({\r\n                blur: function () {\r\n                    active = false;\r\n                    if (!mouseHover) {\r\n                        hideSuggestionBox();\r\n                    }\r\n                },\r\n                focus: function () {\r\n                    active = true;\r\n                    if ($(this).val()) {\r\n                        showSuggestions(jsonData);\r\n                    }\r\n                },\r\n                keyup: function (e) {\r\n                    // Ignore the navigation keys. We don't want to fire ajax calls when navigating\r\n                    if (e.which !== UP_ARROW_KEY && e.which !== DOWN_ARROW_KEY && e.which !== ESCAPE_KEY && e.which !== ENTER_KEY) {\r\n                        if (settings.url) {\r\n                            resetSelection();\r\n                            if (timer) {\r\n                                clearTimeout(timer);\r\n                            }\r\n\r\n                            // set the request to be sent sent as the data parameter\r\n                            request[settings.paramName] = $searchBox.val();\r\n                            timer = setTimeout(function () {\r\n                                getSuggestions(settings.url)\r\n                            }, settings.delay);\r\n                        }\r\n\r\n                        // If filter set to true, call showSuggestions() - it will filter the results for us\r\n                        if (settings.filter) {\r\n                            showSuggestions();\r\n                        }\r\n                    }\r\n                },\r\n                keydown: function (e) {\r\n                    if ($suggestionBox.css('display') !== 'none') {\r\n                        if (e.which == DOWN_ARROW_KEY) {\r\n                            e.preventDefault();\r\n                            moveDown(true);\r\n                        }\r\n                        if (e.which == UP_ARROW_KEY) {\r\n                            e.preventDefault();\r\n                            moveUp(true);\r\n                        }\r\n                        if (e.which === ENTER_KEY && selectedLi > -1) {\r\n                            e.preventDefault();\r\n                            $suggestionBox.find('.selected a').click();\r\n                        }\r\n                        if (e.which == ESCAPE_KEY) {\r\n                            e.preventDefault();\r\n                            hideSuggestionBox();\r\n                        }\r\n                    }\r\n                },\r\n                paste: function () {\r\n                    // Simulate keyup after 200ms otherwise the value of the search box will not be available\r\n                    setTimeout(function () {\r\n                        $searchBox.keyup();\r\n                    }, 200);\r\n                }\r\n            });\r\n\r\n            // Reset the position of the suggestion box if the window is re-sized\r\n            $(window).resize(function () {\r\n                setSuggestionBoxPosition();\r\n            });\r\n\r\n            /**\r\n             * Performs the click action, this can be called for any event you want to recreate a click action for.\r\n             * @param e\r\n             */\r\n            function doClick(e) {\r\n                settings.onClick(e);\r\n            }\r\n\r\n            /**\r\n             * Is the given event made on a suggestion?\r\n             * @param e\r\n             * @returns {boolean}\r\n             */\r\n            function isSuggestion(e) {\r\n                return $(e.target).parents('a').length > 0 || e.target.nodeName === 'A';\r\n            }\r\n\r\n            /**\r\n             * Selects the suggestion at the given position\r\n             * @param position\r\n             */\r\n            function select(position, scroll) {\r\n                selectedHref = $suggestionBox.find(\"li:eq(\" + position + \") a\").attr('href');\r\n                $suggestionBox.find(\"li:eq(\" + position + \")\").addClass('selected');\r\n\r\n                if (scroll) {\r\n                    doScroll(position);\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Unselects the suggestion at the given position\r\n             * @param position\r\n             */\r\n            function unselect(position) {\r\n                $suggestionBox.find(\"li:eq(\" + position + \")\").removeClass('selected');\r\n            }\r\n\r\n            /**\r\n             * Resets any selected suggestions\r\n             */\r\n            function resetSelection() {\r\n                selectedHref = '#';\r\n                selectedLi = -1;\r\n                // remove all selected on reset\r\n                $suggestionBox.find('li').removeClass('selected');\r\n            }\r\n\r\n\r\n            /**\r\n             * Scrolls the suggestion box to the given position\r\n             * @param to\r\n             */\r\n            function doScroll(to) {\r\n                autoScrolled = true;\r\n\r\n                if (to > -1) {\r\n                    var pos = $suggestionBox.find('li:eq(' + to + ')').position().top -\r\n                        $suggestionBox.find('li:eq(0)').position().top;\r\n                }\r\n\r\n                // find scroll position at to and set scroll bars to it\r\n                var scrollTo = (to > -1) ? pos : 0;\r\n                $suggestionBox.scrollTop(scrollTo);\r\n            }\r\n\r\n            /**\r\n             * Moves the selection down to the next suggestion\r\n             */\r\n            function moveDown(scroll) {\r\n                var listSize = $suggestionBox.find('li').size();\r\n\r\n                if (selectedLi === (listSize - 1)) {\r\n                    unselect(selectedLi);\r\n                    resetSelection();\r\n                } else {\r\n                    unselect(selectedLi);\r\n                    selectedLi++;\r\n                    select(selectedLi);\r\n                }\r\n\r\n                if (scroll) {\r\n                    doScroll(selectedLi);\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Moves the selection up to the previous suggestions\r\n             */\r\n            function moveUp(scroll) {\r\n                if (selectedLi > 0) {\r\n                    unselect(selectedLi);\r\n                    selectedLi--;\r\n                    select(selectedLi);\r\n                } else if (selectedLi == -1) {\r\n                    unselect(selectedLi);\r\n                    selectedLi = $suggestionBox.find('li').size() - 1;\r\n                    select(selectedLi);\r\n                } else {\r\n                    unselect(0);\r\n                    resetSelection();\r\n                }\r\n\r\n                if (scroll) {\r\n                    doScroll(selectedLi);\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Redirects the user to the selected suggestion location\r\n             */\r\n            function goToSelection() {\r\n                window.location = selectedHref;\r\n            }\r\n\r\n            /**\r\n             * Makes an ajax call to the given url\r\n             * @param url\r\n             */\r\n            function getSuggestions(url) {\r\n                ajaxCalledVal = $searchBox.val();\r\n                $.ajax({\r\n                    url: url,\r\n                    data: request,\r\n                    dataType: 'json',\r\n                    success: function (data) {\r\n\r\n                        var selectionHasChanged = true;\r\n                        var currentLi = selectedLi;\r\n\r\n                        if (jsonData.results && data.results) {\r\n                            selectionHasChanged = (JSON.stringify(jsonData.results[selectedLi]) !== JSON.stringify(data.results[selectedLi]))\r\n                        }\r\n\r\n                        setJsonData(data);\r\n                        showSuggestions();\r\n\r\n                        // Keep selection if no new information has been entered since ajax was called and the selection is the same.\r\n                        // This prevents the flick back effect when menu has the same data but the ajax hasn't finished.\r\n                        if (currentLi > -1 && ($searchBox.val() === ajaxCalledVal) && !selectionHasChanged) {\r\n                            selectedLi = currentLi;\r\n                            select(selectedLi);\r\n                        }\r\n\r\n                        settings.ajaxSuccess(data);\r\n                    },\r\n                    error: function (e) {\r\n                        settings.ajaxError(e);\r\n                    }\r\n                });\r\n            }\r\n\r\n            /**\r\n             * Returns the index of the list item the mouse is currently hovering over\r\n             * @param e\r\n             * @returns {Number}\r\n             */\r\n            function getSelectionMouseIsOver(e) {\r\n                var $parentLi = $(e.target).parents('li');\r\n                return $parentLi.parent().children().index($parentLi);\r\n            }\r\n\r\n            /**\r\n             * Sets the position of the suggestion box\r\n             */\r\n            function setSuggestionBoxPosition() {\r\n                var borders = getCssValue($searchBox, 'border-bottom-width') + getCssValue($searchBox, 'border-top-width');\r\n                var padding = getCssValue($searchBox, 'padding-bottom') + getCssValue($searchBox, 'padding-top');\r\n\r\n                $suggestionBox.css({\r\n                    'position': 'absolute',\r\n                    'left': ($searchBox.offset().left) + settings.leftOffset,\r\n                    'top': ($searchBox.offset().top) + ($searchBox.height() + borders + padding + settings.topOffset)\r\n                });\r\n            }\r\n\r\n            /**\r\n             * Gets the css integer value for the given element.\r\n             * @param element\r\n             * @param name\r\n             * @returns {Number}\r\n             */\r\n            function getCssValue(element, name) {\r\n                return parseInt(element.css(name).replace('px', ''));\r\n            }\r\n\r\n            /**\r\n             * Hides the suggestion box\r\n             */\r\n            function hideSuggestionBox() {\r\n                $suggestionBox.scrollTop(0);\r\n\r\n                if (settings.fadeOut) {\r\n                    $suggestionBox.fadeOut();\r\n                } else {\r\n                    $suggestionBox.css('display', 'none');\r\n                }\r\n                resetSelection();\r\n\r\n                if (settings.adjustBorderRadius) {\r\n                    $searchBox.css('border-bottom-left-radius', searchBoxBorderRadius.bottomLeft);\r\n                    $searchBox.css('border-bottom-right-radius', searchBoxBorderRadius.bottomRight);\r\n                }\r\n\r\n                settings.onHide()\r\n            }\r\n\r\n            /**\r\n             * Displays the suggestion-box\r\n             */\r\n            function showSuggestionBox() {\r\n                if (settings.fadeIn) {\r\n                    $suggestionBox.fadeIn();\r\n                } else {\r\n                    $suggestionBox.css('display', 'block');\r\n                }\r\n\r\n                if (settings.adjustBorderRadius) {\r\n                    $searchBox.css('border-bottom-left-radius', 0);\r\n                    $searchBox.css('border-bottom-right-radius', 0);\r\n                }\r\n\r\n                settings.onShow();\r\n\r\n            }\r\n\r\n            /**\r\n             * Sets the width of the suggestion box\r\n             */\r\n            function setSuggestionBoxWidth() {\r\n                var searchBoxWidth = getSearchBoxWidth() + settings.widthAdjustment;\r\n                if (settings.menuWidth == 'auto') {\r\n                    $suggestionBox.css({\r\n                        'min-width': searchBoxWidth\r\n                    });\r\n                } else if (settings.menuWidth == 'constrain') {\r\n                    $suggestionBox.css({\r\n                        'width': searchBoxWidth\r\n                    });\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Returns the width of the search box\r\n             * @returns {number}\r\n             */\r\n            function getSearchBoxWidth() {\r\n                return (\r\n                    $searchBox.width() +\r\n                    getCssValue($searchBox, 'border-left-width') +\r\n                    getCssValue($searchBox, 'border-right-width') +\r\n                    getCssValue($searchBox, 'padding-left') +\r\n                    getCssValue($searchBox, 'padding-right')\r\n                );\r\n            }\r\n\r\n            /**\r\n             * Builds the attributes from the JSON\r\n             * @param value\r\n             * @param attr\r\n             * @returns {*}\r\n             */\r\n            function createAttributes(value, attr) {\r\n                $.each(value.attr, function (key, value) {\r\n                    var keys = Object.keys(value);\r\n                    for (var i = 0; i < keys.length; i++) {\r\n                        attr += keys[i] + '=\"' + value[keys[i]] + '\" '\r\n                    }\r\n                });\r\n                return attr;\r\n            }\r\n\r\n            /**\r\n             * Adds any given custom values from the JSON file\r\n             * @param value\r\n             * @param $suggestions\r\n             * @returns {*}\r\n             */\r\n            function createCustomValues(value, $suggestions) {\r\n                for (var i = 0; i < settings.customValues.length; i++) {\r\n                    var custom = value[settings.customValues[i]];\r\n                    if (custom) {\r\n                        $suggestions += value[settings.customValues[i]];\r\n                    }\r\n                }\r\n                return $suggestions;\r\n            }\r\n\r\n            /**\r\n             * Builds the suggestions list from the JSON\r\n             * @param data\r\n             * @returns {string}\r\n             */\r\n            function createSuggestionsList(data) {\r\n                var $suggestions = '<div class=\"suggestion-header\">' + settings.heading + '</div> ' +\r\n                    '<ul class=\"suggestion-box-list\">';\r\n\r\n                $.each(data.results, function (key, value) {\r\n                    if (value.suggestion && value.url) {\r\n                        matches = true;\r\n                        var attr = \"\";\r\n                        if (value.attr) {\r\n                            attr = createAttributes(value, attr);\r\n                        }\r\n                        $suggestions += '<li><a href=\"' + value.url + '\" ' + attr + '>' + value.suggestion;\r\n                        $suggestions = createCustomValues(value, $suggestions);\r\n                        $suggestions += '</a></li>';\r\n                    } else {\r\n                        return false;\r\n                    }\r\n\r\n                    // break when maximum results have been found\r\n                    if (key === (settings.results - 1)) {\r\n                        return false;\r\n                    }\r\n                });\r\n                $suggestions += '</ul>';\r\n\r\n                return $suggestions;\r\n            }\r\n\r\n            function getNoSuggestionMarkup() {\r\n                $suggestionBox.html('<div class=\"no-suggestions\">' + settings.noSuggestionsMessage + '</div>');\r\n            }\r\n\r\n            /**\r\n             * Shows the suggestion-box suggestions if they are available based on the data passed in\r\n             */\r\n            function showSuggestions(forceShow) {\r\n                resetSelection();\r\n\r\n                matches = false;\r\n\r\n                var data = (settings.filter) ? filterResults($searchBox.val()) : jsonData;\r\n\r\n                if (data) {\r\n                    if (data.results) {\r\n                        var $suggestions = createSuggestionsList(data);\r\n                    }\r\n                }\r\n\r\n                // Check for focus before showing suggestion box. User could have clicked outside before request finished.\r\n                if (active || forceShow) {\r\n                    if (matches) {\r\n                        // we have some suggestions, so show them\r\n                        $suggestionBox.html($suggestions);\r\n                        setSuggestionBoxWidth();\r\n                        showSuggestionBox();\r\n                    } else if (forceShow) {\r\n                        // We don't have any suggestions, but we are forcing display, show it regardless.\r\n                        if (settings.showNoSuggestionsMessage) {\r\n                            getNoSuggestionMarkup();\r\n                        }\r\n                        setSuggestionBoxWidth();\r\n                        showSuggestionBox();\r\n                    } else if (settings.showNoSuggestionsMessage && $searchBox.val().length > 0) {\r\n                        // We don't have any suggestions for input and want to display no suggestion message\r\n                        setSuggestionBoxWidth();\r\n                        showSuggestionBox();\r\n                        getNoSuggestionMarkup();\r\n                    } else {\r\n                        // Nope,no matches, hide the suggestion box\r\n                        hideSuggestionBox();\r\n                    }\r\n                } else {\r\n                    // The search box no longer has focus, hide the suggestion box\r\n                    hideSuggestionBox();\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Sets the current JSON data ready for display\r\n             * @param json\r\n             */\r\n            function setJsonData(json) {\r\n                if (json) {\r\n                    jsonData = (json instanceof Object) ? json : $.parseJSON(json);\r\n                } else {\r\n                    jsonData = {};\r\n                }\r\n\r\n                if (settings.sort && jsonData.results) {\r\n                    jsonData.results.sort(settings.sort);\r\n                }\r\n            }\r\n\r\n\r\n            /**\r\n             * Loads JSON from the given url\r\n             * @param url\r\n             */\r\n            function loadJson(url) {\r\n                $.ajax({\r\n                    url: url,\r\n                    dataType: 'json',\r\n                    success: function (data) {\r\n                        setJsonData(data);\r\n                    },\r\n                    error: function (e) {\r\n                        console.log(e);\r\n                    }\r\n                });\r\n            }\r\n\r\n            /**\r\n             * Filters the JSON based on the user input\r\n             * @param value\r\n             * @returns {Object}\r\n             */\r\n            function filterResults(value) {\r\n                var data;\r\n\r\n                value = value.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\r\n                filterPattern = settings.filterPattern.replace(\"{INPUT}\", value);\r\n\r\n                if (!value) {\r\n                    // we weren't passed anything to filter against, return empty object\r\n                    return {};\r\n                }\r\n                if (jsonData) {\r\n                    if (jsonData.results) {\r\n                        // We have JSON data and user input, so apply the filter\r\n                        var regex = new RegExp(filterPattern, \"i\");\r\n                        data = $.grep(jsonData.results, function (name) {\r\n                            return regex.test(name.suggestion);\r\n                        });\r\n                    }\r\n                }\r\n                // Sort the results, if sort function passed\r\n                if (settings.sort) {\r\n                    data.sort(settings.sort);\r\n                }\r\n\r\n                var json = JSON.stringify({\"results\": data});\r\n\r\n                return $.parseJSON(json);\r\n            }\r\n\r\n            // returned methods\r\n            return {\r\n                getSuggestions: function (url) {\r\n                    getSuggestions(url);\r\n                    return this;\r\n                },\r\n                addSuggestions: function (json) {\r\n                    setJsonData(json);\r\n                    return this;\r\n                },\r\n                loadSuggestions: function (url) {\r\n                    loadJson(url);\r\n                    return this;\r\n                },\r\n                getJson: function () {\r\n                    return JSON.stringify(jsonData);\r\n                },\r\n                moveUp: function () {\r\n                    moveUp();\r\n                    return this;\r\n                },\r\n                moveDown: function () {\r\n                    moveDown();\r\n                    return this;\r\n                },\r\n                selectedUrl: function () {\r\n                    return selectedHref;\r\n                },\r\n                selectedSuggestion: function () {\r\n                    return $suggestionBox.find('li:eq(' + selectedLi + ')').text();\r\n                },\r\n                position: function () {\r\n                    return selectedLi;\r\n                },\r\n                select: function (position) {\r\n                    unselect(selectedLi);\r\n                    selectedLi = position;\r\n                    select(position, settings.scrollable);\r\n                    return this;\r\n                },\r\n                reset: function () {\r\n                    unselect(selectedLi);\r\n                    resetSelection();\r\n                    return this;\r\n                },\r\n                show: function (force) {\r\n                    force = (force) ? force : false;\r\n                    showSuggestions(force);\r\n                    return this;\r\n                },\r\n                hide: function () {\r\n                    hideSuggestionBox();\r\n                    return this;\r\n                },\r\n                url: function (url) {\r\n                    settings.url = url;\r\n                    return this;\r\n                },\r\n                fadeIn: function (fadeIn) {\r\n                    settings.fadeIn = fadeIn;\r\n                    return this;\r\n                },\r\n                fadeOut: function (fadeOut) {\r\n                    settings.fadeOut = fadeOut;\r\n                    return this;\r\n                },\r\n                delay: function (ms) {\r\n                    settings.delay = ms;\r\n                    return this;\r\n                },\r\n                heading: function (heading) {\r\n                    settings.heading = heading;\r\n                    return this;\r\n                },\r\n                results: function (results) {\r\n                    settings.results = results;\r\n                    return this;\r\n                },\r\n                ajaxError: function (ajaxError) {\r\n                    settings.ajaxError = ajaxError;\r\n                    return this;\r\n                },\r\n                ajaxSuccess: function (ajaxSuccess) {\r\n                    settings.ajaxSuccess = ajaxSuccess;\r\n                    return this;\r\n                },\r\n                filter: function (filter) {\r\n                    settings.filter = filter;\r\n                    return this;\r\n                },\r\n                filterPattern: function (pattern) {\r\n                    settings.filterPattern = pattern;\r\n                    return this;\r\n                },\r\n                sort: function (sortFunc) {\r\n                    settings.sort = sortFunc;\r\n                    return this;\r\n                },\r\n                onClick: function (action) {\r\n                    settings.onClick = action;\r\n                    return this;\r\n                },\r\n                getId: function (withHash) {\r\n                    return (withHash) ? '#' + randId : randId;\r\n                },\r\n                reservedKey: function (e) {\r\n                    var key = e.which;\r\n                    return key === ENTER_KEY || key === ESCAPE_KEY || key === UP_ARROW_KEY || key === DOWN_ARROW_KEY\r\n                },\r\n                destroy: function () {\r\n                    $searchBox.unbind(this);\r\n                    $suggestionBox.remove();\r\n                    return null;\r\n                }\r\n            };\r\n        };\r\n    }(jQuery)\r\n);"],"sourceRoot":"/source/"}