{"version":3,"sources":["suggestion-box.js"],"names":["$","SuggestionBox","options","context","setup","setSuggestionBoxPosition","settings","height","$suggestionBox","css","scrollable","blurEvent","active","mouseHover","hideSuggestionBox","keyupEvents","e","which","UP_ARROW_KEY","DOWN_ARROW_KEY","ESCAPE_KEY","ENTER_KEY","input","val","url","resetSelection","timer","clearTimeout","request","paramName","setTimeout","getSuggestions","delay","filter","showSuggestions","hybrid","length","matches","urlClone","focusEvents","this","jsonData","keydownEvents","preventDefault","moveDown","moveUp","selectedLi","find","click","pasteEvents","keyup","doClick","onClick","isSuggestion","target","parents","nodeName","select","position","scroll","selectedHref","attr","addClass","doScroll","unselect","removeClass","to","autoScrolled","pos","top","scrollTo","scrollTop","listSize","size","goToSelection","window","location","ajaxCalledVal","ajax","data","dataType","success","selectionHasChanged","currentLi","suggestions","JSON","stringify","setJsonData","ajaxSuccess","error","ajaxError","getSelectionMouseIsOver","$parentLi","parent","children","index","borders","getCssValue","padding","left","offset","leftOffset","topOffset","element","name","parseInt","replace","fadeOut","adjustBorderRadius","searchBoxBorderRadius","bottomLeft","bottomRight","onHide","showSuggestionBox","fadeIn","onShow","setSuggestionBoxWidth","searchBoxWidth","getSearchBoxWidth","widthAdjustment","menuWidth","min-width","width","createAttributes","value","each","key","keys","Object","i","createCustomValues","$suggestions","customData","custom","createSuggestionsList","filterPattern","heading","suggestion","image","RegExp","results","getNoSuggestionMarkup","html","noSuggestionsMessage","forceShow","filterResults","showNoSuggestionsMessage","json","parseJSON","sort","loadJson","console","log","regex","grep","test","randId","extend","highlightMatch","Math","floor","random","append","on","mousemove","mouseout","focus","resize","addSuggestions","loadSuggestions","getJson","selectedUrl","selectedSuggestion","text","selectedImage","show","force","hide","getId","withHash","reservedKey","getDomElement","get","destroy","unbind","off","remove","set","option","clearSuggestions","fn","suggestionBox","domElement","args","makeArray","arguments","jQuery"],"mappings":"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","file":"suggestion-box.min.js","sourcesContent":["(function ($) {\r\n\r\n    $.fn.suggestionBox = function (options) {\r\n\r\n        // Get the bound dom element, we don't want to use id's as MVVM frameworks don't use them (i.e. AngularJS, KnockoutJS etc)\r\n        var domElement = $(this).get()[0];\r\n\r\n        var args = $.makeArray(arguments);\r\n        var suggestionBox = $.data(domElement, 'suggestionBox');\r\n\r\n        if (suggestionBox) {\r\n            suggestionBox.set(args[0], args[1]);\r\n        } else {\r\n            suggestionBox = new SuggestionBox(options, this);\r\n            $.data(domElement, 'suggestionBox', suggestionBox);\r\n        }\r\n        return suggestionBox;\r\n    };\r\n\r\n    function SuggestionBox(options, context) {\r\n\r\n        var settings = $.extend({\r\n                // default settings.\r\n                topOffset: 0,\r\n                leftOffset: 0,\r\n                widthAdjustment: 0,\r\n                delay: 400, // in ms\r\n                heading: 'Suggestions',\r\n                results: 10,\r\n                fadeIn: true,\r\n                fadeOut: false,\r\n                menuWidth: 'auto',\r\n                showNoSuggestionsMessage: false,\r\n                noSuggestionsMessage: 'No Suggestions Found',\r\n                filter: true,\r\n                filterPattern: \"({INPUT})\",\r\n                highlightMatch: false,\r\n                adjustBorderRadius: true,\r\n                ajaxError: function (e) {\r\n                    console.log(e);\r\n                },\r\n                ajaxSuccess: function (data) {\r\n                },\r\n                onClick: function () {\r\n                    goToSelection();\r\n                    hideSuggestionBox();\r\n                    context.val('');\r\n                },\r\n                onShow: function () {\r\n                },\r\n                onHide: function () {\r\n                },\r\n                paramName: 'search',\r\n                customData: [],\r\n                scrollable: false,\r\n                hybrid: false\r\n            },\r\n            options);\r\n\r\n        // Constants for key values\r\n        var ENTER_KEY = 13;\r\n        var UP_ARROW_KEY = 38;\r\n        var DOWN_ARROW_KEY = 40;\r\n        var ESCAPE_KEY = 27;\r\n\r\n        // Default values for selected list item\r\n        var selectedLi = -1;\r\n        var selectedHref = '#';\r\n\r\n        // Is the mouse hovering over the suggestion box?\r\n        var mouseHover = false;\r\n        // Timer for only making ajax calls when the user stops typing\r\n        var timer = null;\r\n        // Did we get any suggestions?\r\n        var matches = false;\r\n        // Is the search box active (does it have focus)\r\n        var active = false;\r\n        // Whether or not the scroll action was done pragmatically\r\n        var autoScrolled = false;\r\n        // create a blank object for our request\r\n        var request = {};\r\n        var jsonData = {};\r\n        // The value of the input when ajax was called\r\n        var ajaxCalledVal;\r\n        var urlClone;\r\n\r\n        var searchBoxBorderRadius,\r\n            $suggestionBox = null,\r\n            randId;\r\n\r\n        /**\r\n         * Initialise the plugin\r\n         */\r\n        (function _init() {\r\n            //console.log(context.foo);\r\n            // Inject the suggestion box into the body of the web page\r\n            randId = 'suggestion-box-' + Math.floor(Math.random() * 10000000);\r\n            // Inject the suggestion box into the body of the web page\r\n            $('body').append('<div id=\"' + randId + '\" class=\"suggestion-box\"></div>');\r\n\r\n            searchBoxBorderRadius = {\r\n                bottomLeft: context.css('border-bottom-left-radius'),\r\n                bottomRight: context.css('border-bottom-right-radius')\r\n            };\r\n\r\n            $suggestionBox = $('#' + randId);\r\n            urlClone = settings.url;\r\n\r\n            // Turn off autocomplete\r\n            context.attr('autocomplete', 'off');\r\n\r\n            // Bind event handlers\r\n            context.on('blur', blurEvent);\r\n            context.on('keyup', keyupEvents);\r\n            context.on('focus', focusEvents);\r\n            context.on('keydown', keydownEvents);\r\n            context.on('paste', pasteEvents);\r\n\r\n            setup();\r\n        })();\r\n\r\n        function setup() {\r\n            setSuggestionBoxPosition();\r\n\r\n            if (settings.height) {\r\n                $suggestionBox.css('max-height', settings.height);\r\n            }\r\n            if (settings.scrollable) {\r\n                $suggestionBox.css('overflow', 'auto');\r\n            }\r\n\r\n        }\r\n\r\n\r\n        $suggestionBox.on({\r\n            mousemove: function (e) {\r\n                if (isSuggestion(e) && !autoScrolled) {\r\n                    unselect(selectedLi);\r\n                    selectedLi = getSelectionMouseIsOver(e);\r\n                    select(selectedLi);\r\n                }\r\n\r\n                mouseHover = true;\r\n                autoScrolled = false;\r\n            },\r\n            mouseout: function (e) {\r\n                if (isSuggestion(e) && !autoScrolled) {\r\n                    unselect(selectedLi);\r\n                    resetSelection();\r\n                } else if ($(':focus').attr('id') !== context.attr('id')) {\r\n                    // We're out of the suggestion box so re-focus on search\r\n                    context.focus();\r\n                }\r\n                mouseHover = false;\r\n            },\r\n            click: function (e) {\r\n                if (isSuggestion(e)) {\r\n                    e.preventDefault();\r\n                    doClick(e);\r\n                }\r\n            }\r\n        });\r\n\r\n        function blurEvent() {\r\n            active = false;\r\n            if (!mouseHover) {\r\n                hideSuggestionBox();\r\n            }\r\n        }\r\n\r\n        function keyupEvents(e) {\r\n            // Ignore the navigation keys. We don't want to fire ajax calls when navigating\r\n            if (e.which !== UP_ARROW_KEY && e.which !== DOWN_ARROW_KEY && e.which !== ESCAPE_KEY && e.which !== ENTER_KEY) {\r\n                var input = context.val();\r\n                if (settings.url) {\r\n                    resetSelection();\r\n                    if (timer) {\r\n                        clearTimeout(timer);\r\n                    }\r\n\r\n                    // set the request to be sent sent as the data parameter\r\n                    request[settings.paramName] = input;\r\n                    timer = setTimeout(function () {\r\n                        getSuggestions(settings.url)\r\n                    }, settings.delay);\r\n                }\r\n\r\n                // If filter set to true, call showSuggestions() - it will filter the results for us\r\n                if (settings.filter) {\r\n                    showSuggestions();\r\n                }\r\n\r\n                if (settings.hybrid && (input.length <= 0 || !matches)) {\r\n                    getSuggestions(urlClone);\r\n                }\r\n            }\r\n        }\r\n\r\n        function focusEvents() {\r\n            active = true;\r\n            if ($(this).val()) {\r\n                showSuggestions(jsonData);\r\n            }\r\n        }\r\n\r\n        function keydownEvents(e) {\r\n            if (e.which == DOWN_ARROW_KEY) {\r\n                e.preventDefault();\r\n                moveDown(true);\r\n            }\r\n            if ($suggestionBox.css('display') !== 'none') {\r\n                if (e.which == UP_ARROW_KEY) {\r\n                    e.preventDefault();\r\n                    moveUp(true);\r\n                }\r\n                if (e.which === ENTER_KEY && selectedLi > -1) {\r\n                    e.preventDefault();\r\n                    $suggestionBox.find('.selected a').click();\r\n                }\r\n                if (e.which == ESCAPE_KEY) {\r\n                    e.preventDefault();\r\n                    hideSuggestionBox();\r\n                }\r\n            }\r\n        }\r\n\r\n        function pasteEvents() {\r\n            // Simulate keyup after 200ms otherwise the value of the search box will not be available\r\n            setTimeout(function () {\r\n                context.keyup();\r\n            }, 200);\r\n        }\r\n\r\n\r\n        // Reset the position of the suggestion box if the window is re-sized\r\n        $(window).resize(function () {\r\n            setSuggestionBoxPosition();\r\n        });\r\n\r\n        /**\r\n         * Performs the click action, this can be called for any event you want to recreate a click action for.\r\n         * @param e\r\n         */\r\n        function doClick(e) {\r\n            settings.onClick(e);\r\n        }\r\n\r\n        /**\r\n         * Is the given event made on a suggestion?\r\n         * @param e\r\n         * @returns {boolean}\r\n         */\r\n        function isSuggestion(e) {\r\n            return $(e.target).parents('a').length > 0 || e.target.nodeName === 'A';\r\n        }\r\n\r\n        /**\r\n         * Selects the suggestion at the given position\r\n         * @param position\r\n         */\r\n        function select(position, scroll) {\r\n            selectedHref = $suggestionBox.find(\"li:eq(\" + position + \") a\").attr('href');\r\n            $suggestionBox.find(\"li:eq(\" + position + \")\").addClass('selected');\r\n\r\n            if (scroll) {\r\n                doScroll(position);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Unselects the suggestion at the given position\r\n         * @param position\r\n         */\r\n        function unselect(position) {\r\n            $suggestionBox.find(\"li:eq(\" + position + \")\").removeClass('selected');\r\n        }\r\n\r\n        /**\r\n         * Resets any selected suggestions\r\n         */\r\n        function resetSelection() {\r\n            selectedHref = '#';\r\n            selectedLi = -1;\r\n            // remove all selected on reset\r\n            $suggestionBox.find('li').removeClass('selected');\r\n        }\r\n\r\n\r\n        /**\r\n         * Scrolls the suggestion box to the given position\r\n         * @param to\r\n         */\r\n        function doScroll(to) {\r\n            autoScrolled = true;\r\n\r\n            if (to > -1) {\r\n                var pos = $suggestionBox.find('li:eq(' + to + ')').position().top -\r\n                    $suggestionBox.find('li:eq(0)').position().top;\r\n            }\r\n\r\n            // find scroll position at to and set scroll bars to it\r\n            var scrollTo = (to > -1) ? pos : 0;\r\n            $suggestionBox.scrollTop(scrollTo);\r\n        }\r\n\r\n        /**\r\n         * Moves the selection down to the next suggestion\r\n         */\r\n        function moveDown(scroll) {\r\n            var listSize = $suggestionBox.find('li').size();\r\n\r\n            if ($suggestionBox.css('display') === 'none') {\r\n                showSuggestions();\r\n            } else if (selectedLi === (listSize - 1)) {\r\n                unselect(selectedLi);\r\n                resetSelection();\r\n            } else {\r\n                unselect(selectedLi);\r\n                selectedLi++;\r\n                select(selectedLi);\r\n            }\r\n\r\n            if (scroll) {\r\n                doScroll(selectedLi);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Moves the selection up to the previous suggestions\r\n         */\r\n        function moveUp(scroll) {\r\n            if (selectedLi > 0) {\r\n                unselect(selectedLi);\r\n                selectedLi--;\r\n                select(selectedLi);\r\n            } else if (selectedLi == -1) {\r\n                unselect(selectedLi);\r\n                selectedLi = $suggestionBox.find('li').size() - 1;\r\n                select(selectedLi);\r\n            } else {\r\n                unselect(0);\r\n                resetSelection();\r\n            }\r\n\r\n            if (scroll) {\r\n                doScroll(selectedLi);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Redirects the user to the selected suggestion location\r\n         */\r\n        function goToSelection() {\r\n            window.location = selectedHref;\r\n        }\r\n\r\n        /**\r\n         * Makes an ajax call to the given url\r\n         * @param url\r\n         */\r\n        function getSuggestions(url) {\r\n            ajaxCalledVal = context.val();\r\n            $.ajax({\r\n                url: url,\r\n                data: request,\r\n                dataType: 'json',\r\n                success: function (data) {\r\n\r\n                    var selectionHasChanged = true;\r\n                    var currentLi = selectedLi;\r\n\r\n                    if (jsonData.suggestions && data.suggestions) {\r\n                        selectionHasChanged = (JSON.stringify(jsonData.suggestions[selectedLi]) !== JSON.stringify(data.suggestions[selectedLi]))\r\n                    }\r\n\r\n                    setJsonData(data);\r\n                    showSuggestions();\r\n\r\n                    // Keep selection if no new information has been entered since ajax was called and the selection is the same.\r\n                    // This prevents the flick back effect when menu has the same data but the ajax hasn't finished.\r\n                    if (currentLi > -1 && (context.val() === ajaxCalledVal) && !selectionHasChanged) {\r\n                        selectedLi = currentLi;\r\n                        select(selectedLi);\r\n                    }\r\n\r\n                    if (settings.hybrid) {\r\n                        urlClone = settings.url;\r\n                    }\r\n\r\n                    settings.ajaxSuccess(data);\r\n                },\r\n                error: function (e) {\r\n                    settings.ajaxError(e);\r\n                }\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Returns the index of the list item the mouse is currently hovering over\r\n         * @param e\r\n         * @returns {Number}\r\n         */\r\n        function getSelectionMouseIsOver(e) {\r\n            var $parentLi = $(e.target).parents('li');\r\n            return $parentLi.parent().children().index($parentLi);\r\n        }\r\n\r\n        /**\r\n         * Sets the position of the suggestion box\r\n         */\r\n        function setSuggestionBoxPosition() {\r\n            var borders = getCssValue(context, 'border-bottom-width') + getCssValue(context, 'border-top-width');\r\n            var padding = getCssValue(context, 'padding-bottom') + getCssValue(context, 'padding-top');\r\n\r\n            $suggestionBox.css({\r\n                'position': 'absolute',\r\n                'left': (context.offset().left) + settings.leftOffset,\r\n                'top': (context.offset().top) + (context.height() + borders + padding + settings.topOffset)\r\n            });\r\n\r\n        }\r\n\r\n        /**\r\n         * Gets the css integer value for the given element.\r\n         * @param element\r\n         * @param name\r\n         * @returns {Number}\r\n         */\r\n        function getCssValue(element, name) {\r\n            return parseInt(element.css(name).replace('px', ''));\r\n        }\r\n\r\n        /**\r\n         * Hides the suggestion box\r\n         */\r\n        function hideSuggestionBox() {\r\n            $suggestionBox.scrollTop(0);\r\n\r\n            if (settings.fadeOut) {\r\n                $suggestionBox.fadeOut();\r\n            } else {\r\n                $suggestionBox.css('display', 'none');\r\n            }\r\n            resetSelection();\r\n\r\n            if (settings.adjustBorderRadius) {\r\n                context.css('border-bottom-left-radius', searchBoxBorderRadius.bottomLeft);\r\n                context.css('border-bottom-right-radius', searchBoxBorderRadius.bottomRight);\r\n            }\r\n\r\n            settings.onHide()\r\n        }\r\n\r\n        /**\r\n         * Displays the suggestion-box\r\n         */\r\n        function showSuggestionBox() {\r\n            if (settings.fadeIn) {\r\n                $suggestionBox.fadeIn();\r\n            } else {\r\n                $suggestionBox.css('display', 'block');\r\n            }\r\n\r\n            if (settings.adjustBorderRadius) {\r\n                context.css('border-bottom-left-radius', 0);\r\n                context.css('border-bottom-right-radius', 0);\r\n            }\r\n\r\n            settings.onShow();\r\n\r\n        }\r\n\r\n        /**\r\n         * Sets the width of the suggestion box\r\n         */\r\n        function setSuggestionBoxWidth() {\r\n            var searchBoxWidth = getSearchBoxWidth() + settings.widthAdjustment;\r\n            if (settings.menuWidth == 'auto') {\r\n                $suggestionBox.css({\r\n                    'min-width': searchBoxWidth\r\n                });\r\n            } else if (settings.menuWidth == 'constrain') {\r\n                $suggestionBox.css({\r\n                    'width': searchBoxWidth\r\n                });\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Returns the width of the search box\r\n         * @returns {number}\r\n         */\r\n        function getSearchBoxWidth() {\r\n            return (\r\n                context.width() +\r\n                getCssValue(context, 'border-left-width') +\r\n                getCssValue(context, 'border-right-width') +\r\n                getCssValue(context, 'padding-left') +\r\n                getCssValue(context, 'padding-right')\r\n            );\r\n        }\r\n\r\n        /**\r\n         * Builds the attributes from the JSON\r\n         * @param value\r\n         * @param attr\r\n         * @returns {*}\r\n         */\r\n        function createAttributes(value, attr) {\r\n            $.each(value.attr, function (key, value) {\r\n                var keys = Object.keys(value);\r\n                for (var i = 0; i < keys.length; i++) {\r\n                    attr += keys[i] + '=\"' + value[keys[i]] + '\" '\r\n                }\r\n            });\r\n            return attr;\r\n        }\r\n\r\n        /**\r\n         * Adds any given custom values from the JSON file\r\n         * @param value\r\n         * @param $suggestions\r\n         * @returns {*}\r\n         */\r\n        function createCustomValues(value, $suggestions) {\r\n            for (var i = 0; i < settings.customData.length; i++) {\r\n                var custom = value[settings.customData[i]];\r\n                if (custom) {\r\n                    $suggestions += value[settings.customData[i]];\r\n                }\r\n            }\r\n\r\n            return $suggestions;\r\n        }\r\n\r\n        /**\r\n         * Builds the suggestions list from the JSON\r\n         * @param data\r\n         * @returns {string}\r\n         */\r\n        function createSuggestionsList(data) {\r\n\r\n            var filterPattern = settings.filterPattern.replace(\"{INPUT}\", context.val());\r\n\r\n            var $suggestions = '<div class=\"suggestion-header\">' + settings.heading + '</div> ' +\r\n                '<ul class=\"suggestion-box-list\">';\r\n\r\n            $.each(data.suggestions, function (key, value) {\r\n\r\n                if (value.suggestion && value.url) {\r\n                    matches = true;\r\n                    var attr = \"\";\r\n                    if (value.attr) {\r\n                        attr = createAttributes(value, attr);\r\n                    }\r\n                    $suggestions += '<li><a href=\"' + value.url + '\" ' + attr + '>';\r\n                    if (value.image) {\r\n                        $suggestions += '<img src=\"' + value.image + '\" />';\r\n                    }\r\n\r\n                    $suggestions += (settings.highlightMatch) ? (value.suggestion).replace(new RegExp(filterPattern, 'gi'), '<b>$&</b>') : value.suggestion;\r\n\r\n                    if (settings.customData.length > 0) {\r\n                        $suggestions = createCustomValues(value, $suggestions);\r\n                    }\r\n                    $suggestions += '</a></li>';\r\n                } else {\r\n                    return false;\r\n                }\r\n\r\n                // break when maximum results have been found\r\n                if (key === (settings.results - 1)) {\r\n                    return false;\r\n                }\r\n            });\r\n            $suggestions += '</ul>';\r\n\r\n            return $suggestions;\r\n        }\r\n\r\n        function getNoSuggestionMarkup() {\r\n            $suggestionBox.html('<div class=\"no-suggestions\">' + settings.noSuggestionsMessage + '</div>');\r\n        }\r\n\r\n        /**\r\n         * Shows the suggestion-box suggestions if they are available based on the data passed in\r\n         */\r\n        function showSuggestions(forceShow) {\r\n            resetSelection();\r\n\r\n            matches = false;\r\n\r\n            var data = (settings.filter) ? filterResults(context.val()) : jsonData;\r\n\r\n\r\n            if (data) {\r\n                if (data.suggestions) {\r\n                    var $suggestions = createSuggestionsList(data);\r\n                }\r\n            }\r\n\r\n            // Check for focus before showing suggestion box. User could have clicked outside before request finished.\r\n            if (active || forceShow) {\r\n                if (matches && (context.val().length > 0 || forceShow)) {\r\n                    // we have some suggestions, so show them\r\n                    $suggestionBox.html($suggestions);\r\n                    setSuggestionBoxWidth();\r\n                    showSuggestionBox();\r\n                } else if (forceShow) {\r\n                    // We don't have any suggestions, but we are forcing display, show it regardless.\r\n                    if (settings.showNoSuggestionsMessage) {\r\n                        getNoSuggestionMarkup();\r\n                    }\r\n                    setSuggestionBoxWidth();\r\n                    showSuggestionBox();\r\n                } else if (settings.showNoSuggestionsMessage && context.val().length > 0) {\r\n                    // We don't have any suggestions for input and want to display no suggestion message\r\n                    setSuggestionBoxWidth();\r\n                    showSuggestionBox();\r\n                    getNoSuggestionMarkup();\r\n                } else {\r\n                    // Nope,no matches, hide the suggestion box\r\n                    hideSuggestionBox();\r\n                }\r\n            } else {\r\n                // The search box no longer has focus, hide the suggestion box\r\n                hideSuggestionBox();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Sets the current JSON data ready for display\r\n         * @param json\r\n         */\r\n        function setJsonData(json) {\r\n            if (json) {\r\n                jsonData = (json instanceof Object) ? json : $.parseJSON(json);\r\n            } else {\r\n                jsonData = {};\r\n            }\r\n\r\n            if (settings.sort && jsonData.suggestions) {\r\n                jsonData.suggestions.sort(settings.sort);\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Loads JSON from the given url\r\n         * @param url\r\n         */\r\n        function loadJson(url) {\r\n            $.ajax({\r\n                url: url,\r\n                dataType: 'json',\r\n                success: function (data) {\r\n                    setJsonData(data);\r\n                },\r\n                error: function (e) {\r\n                    console.log(e);\r\n                }\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Filters the JSON based on the user input\r\n         * @param value\r\n         * @returns {Object}\r\n         */\r\n        function filterResults(value) {\r\n            var data;\r\n\r\n            value = value.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\r\n            filterPattern = settings.filterPattern.replace(\"{INPUT}\", value);\r\n\r\n            if (!value) {\r\n                // we weren't passed anything to filter against, return empty object\r\n                return jsonData;\r\n            }\r\n            if (jsonData) {\r\n                if (jsonData.suggestions) {\r\n\r\n                    // We have JSON data and user input, so apply the filter\r\n                    var regex = new RegExp(filterPattern, \"i\");\r\n                    data = $.grep(jsonData.suggestions, function (name) {\r\n                        return regex.test(name.suggestion);\r\n                    });\r\n                }\r\n            }\r\n            // Sort the results, if sort function passed\r\n            if (settings.sort && data) {\r\n                data.sort(settings.sort);\r\n            }\r\n\r\n\r\n            var json = JSON.stringify({\"suggestions\": data});\r\n\r\n            return $.parseJSON(json);\r\n        }\r\n\r\n        // public methods - Some are simply calls to private methods, but this is more readable.\r\n        context.getSuggestions = function (url) {\r\n            getSuggestions(url);\r\n            return context;\r\n        };\r\n        context.addSuggestions = function (json) {\r\n            setJsonData(json);\r\n            return context;\r\n        };\r\n        context.loadSuggestions = function (url) {\r\n            loadJson(url);\r\n            return context;\r\n        };\r\n        context.getJson = function () {\r\n            return JSON.stringify(jsonData);\r\n        };\r\n        context.moveUp = function () {\r\n            moveUp();\r\n            return context;\r\n        };\r\n        context.moveDown = function () {\r\n            moveDown();\r\n            return context;\r\n        };\r\n        context.selectedUrl = function () {\r\n            return selectedHref;\r\n        };\r\n        context.selectedSuggestion = function () {\r\n            return $suggestionBox.find('li:eq(' + selectedLi + ')').text();\r\n        };\r\n        context.selectedImage = function () {\r\n\r\n            return $suggestionBox.find('li:eq(' + selectedLi + ')').find('img').attr('src');\r\n        };\r\n        context.position = function () {\r\n            return selectedLi;\r\n        };\r\n        context.select = function (position) {\r\n            unselect(selectedLi);\r\n            selectedLi = position;\r\n            select(position, settings.scrollable);\r\n            return context;\r\n        };\r\n        context.resetSelection = function () {\r\n            unselect(selectedLi);\r\n            resetSelection();\r\n            return context;\r\n        };\r\n        context.show = function (force) {\r\n            force = (force) ? force : false;\r\n            showSuggestions(force);\r\n            return context;\r\n        };\r\n        context.hide = function () {\r\n            hideSuggestionBox();\r\n            return context;\r\n        };\r\n        context.getId = function (withHash) {\r\n            return (withHash) ? '#' + randId : randId;\r\n        };\r\n        context.reservedKey = function (e) {\r\n            var key = e.which;\r\n            return key === ENTER_KEY || key === ESCAPE_KEY || key === UP_ARROW_KEY || key === DOWN_ARROW_KEY\r\n        };\r\n        context.getDomElement = function () {\r\n            return $(context).get()[0];\r\n        };\r\n        context.destroy = function () {\r\n            $suggestionBox.unbind();\r\n            // remove event handlers\r\n            context.off('blur', blurEvent);\r\n            context.off('keyup', keyupEvents);\r\n            context.off('focus', focusEvents);\r\n            context.off('keydown', keydownEvents);\r\n            context.off('paste', pasteEvents);\r\n            $suggestionBox.remove();\r\n            return null;\r\n        };\r\n        context.set = function (option, value) {\r\n            settings[option] = value;\r\n            setup();\r\n            return context;\r\n        };\r\n        context.clearSuggestions = function () {\r\n            setJsonData(JSON.stringify({}));\r\n            return context;\r\n        };\r\n\r\n        return context;\r\n    }\r\n}(jQuery));"],"sourceRoot":"/source/"}