{"version":3,"sources":["suggestion-box.js"],"names":["$","SuggestionBox","options","context","_setup","setSuggestionBoxPosition","settings","height","$suggestionBox","css","scrollable","doClick","e","onClick","isSuggestion","target","parents","length","nodeName","select","position","scroll","selectedHref","find","attr","addClass","doScroll","unselect","removeClass","resetSelection","selectedLi","to","autoScrolled","pos","top","scrollTo","scrollTop","moveDown","listSize","size","moveUp","goToSelection","window","location","getSuggestions","url","ajaxCalledVal","self","val","ajax","data","request","dataType","success","selectionHasChanged","currentLi","jsonData","results","JSON","stringify","setJsonData","showSuggestions","ajaxSuccess","error","ajaxError","getSelectionMouseIsOver","$parentLi","parent","children","index","borders","getCssValue","padding","left","offset","leftOffset","topOffset","element","name","parseInt","replace","hideSuggestionBox","fadeOut","adjustBorderRadius","searchBoxBorderRadius","bottomLeft","bottomRight","onHide","showSuggestionBox","fadeIn","onShow","setSuggestionBoxWidth","searchBoxWidth","getSearchBoxWidth","widthAdjustment","menuWidth","min-width","width","createAttributes","value","each","key","keys","Object","i","createCustomValues","$suggestions","customData","custom","createSuggestionsList","heading","suggestion","matches","getNoSuggestionMarkup","html","noSuggestionsMessage","forceShow","filterResults","active","showNoSuggestionsMessage","json","parseJSON","sort","loadJson","console","log","filterPattern","regex","RegExp","grep","test","randId","extend","delay","filter","paramName","ENTER_KEY","UP_ARROW_KEY","DOWN_ARROW_KEY","ESCAPE_KEY","mouseHover","timer","Math","floor","random","append","on","mousemove","mouseout","focus","click","preventDefault","blur","this","keyup","which","clearTimeout","setTimeout","keydown","paste","resize","addSuggestions","loadSuggestions","getJson","selectedUrl","selectedSuggestion","text","reset","show","force","hide","getId","withHash","reservedKey","getContext","destroy","unbind","remove","set","option","fn","suggestionBox","args","makeArray","arguments","jQuery"],"mappings":"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","file":"suggestion-box.min.js","sourcesContent":["(function ($) {\r\n\r\n        $.fn.suggestionBox = function (options) {\r\n\r\n            var args = $.makeArray(arguments);\r\n            var suggestionBox = $.data(this, 'suggestionBox');\r\n\r\n            if (suggestionBox) {\r\n                suggestionBox.set(args[0], args[1]);\r\n            } else {\r\n                suggestionBox = new SuggestionBox(options, this);\r\n                $.data(this, 'suggestionBox', suggestionBox);\r\n            }\r\n            return suggestionBox;\r\n        };\r\n\r\n        function SuggestionBox(options, context) {\r\n            var self = context;\r\n\r\n            var settings = $.extend({\r\n                    // default settings.\r\n                    topOffset: 0,\r\n                    leftOffset: 0,\r\n                    widthAdjustment: 0,\r\n                    delay: 400, // in ms\r\n                    heading: 'Suggestions',\r\n                    results: 10,\r\n                    fadeIn: true,\r\n                    fadeOut: false,\r\n                    menuWidth: 'auto',\r\n                    showNoSuggestionsMessage: false,\r\n                    noSuggestionsMessage: 'No Suggestions Found',\r\n                    filter: false,\r\n                    filterPattern: \"({INPUT})\",\r\n                    adjustBorderRadius: true,\r\n                    ajaxError: function (e) {\r\n                        console.log(e);\r\n                    },\r\n                    ajaxSuccess: function (data) {\r\n                    },\r\n                    onClick: function () {\r\n                        goToSelection();\r\n                        hideSuggestionBox();\r\n                        self.val('');\r\n                    },\r\n                    onShow: function () {\r\n                    },\r\n                    onHide: function () {\r\n                    },\r\n                    paramName: 'search',\r\n                    customData: [],\r\n                    scrollable: false\r\n                },\r\n                options);\r\n\r\n\r\n            // Constants for key values\r\n            var ENTER_KEY = 13;\r\n            var UP_ARROW_KEY = 38;\r\n            var DOWN_ARROW_KEY = 40;\r\n            var ESCAPE_KEY = 27;\r\n\r\n            // Default values for selected list item\r\n            var selectedLi = -1;\r\n            var selectedHref = '#';\r\n\r\n            // Is the mouse hovering over the suggestion box?\r\n            var mouseHover = false;\r\n            // Timer for only making ajax calls when the user stops typing\r\n            var timer = null;\r\n            // Did we get any suggestions?\r\n            var matches = false;\r\n            // Is the search box active (does it have focus)\r\n            var active = false;\r\n            // Whether or not the scroll action was done pragmatically\r\n            var autoScrolled = false;\r\n            // create a blank object for our request\r\n            var request = {};\r\n            var jsonData = {};\r\n            // The value of the input when ajax was called\r\n            var ajaxCalledVal;\r\n\r\n            var searchBoxBorderRadius,\r\n                $suggestionBox = null,\r\n                randId;\r\n\r\n            /**\r\n             * Initialise the plugin\r\n             */\r\n            (function _init() {\r\n                // Inject the suggestion box into the body of the web page\r\n                randId = 'suggestion-box-' + Math.floor(Math.random() * 10000000);\r\n                // Inject the suggestion box into the body of the web page\r\n                $('body').append('<div id=\"' + randId + '\" class=\"suggestion-box\"></div>');\r\n\r\n                searchBoxBorderRadius = {\r\n                    bottomLeft: self.css('border-bottom-left-radius'),\r\n                    bottomRight: self.css('border-bottom-right-radius')\r\n                };\r\n\r\n                $suggestionBox = $('#' + randId);\r\n\r\n                // Turn off autocomplete\r\n                self.attr('autocomplete', 'off');\r\n\r\n                _setup();\r\n            })();\r\n\r\n            function _setup() {\r\n                setSuggestionBoxPosition();\r\n\r\n                if (settings.height) {\r\n                    $suggestionBox.css('max-height', settings.height);\r\n                }\r\n                if (settings.scrollable) {\r\n                    $suggestionBox.css('overflow', 'auto');\r\n                }\r\n\r\n            }\r\n\r\n\r\n            $suggestionBox.on({\r\n                mousemove: function (e) {\r\n                    if (isSuggestion(e) && !autoScrolled) {\r\n                        unselect(selectedLi);\r\n                        selectedLi = getSelectionMouseIsOver(e);\r\n                        select(selectedLi);\r\n                    }\r\n\r\n                    mouseHover = true;\r\n                    autoScrolled = false;\r\n                },\r\n                mouseout: function (e) {\r\n                    if (isSuggestion(e) && !autoScrolled) {\r\n                        unselect(selectedLi);\r\n                        resetSelection();\r\n                    } else if ($(':focus').attr('id') !== self.attr('id')) {\r\n                        // We're out of the suggestion box so re-focus on search\r\n                        self.focus();\r\n                    }\r\n                    mouseHover = false;\r\n                },\r\n                click: function (e) {\r\n                    if (isSuggestion(e)) {\r\n                        e.preventDefault();\r\n                        doClick(e);\r\n                    }\r\n                }\r\n            });\r\n\r\n            self.on({\r\n                blur: function () {\r\n                    active = false;\r\n                    if (!mouseHover) {\r\n                        hideSuggestionBox();\r\n                    }\r\n                },\r\n                focus: function () {\r\n                    active = true;\r\n                    if ($(this).val()) {\r\n                        showSuggestions(jsonData);\r\n                    }\r\n                },\r\n                keyup: function (e) {\r\n                    // Ignore the navigation keys. We don't want to fire ajax calls when navigating\r\n                    if (e.which !== UP_ARROW_KEY && e.which !== DOWN_ARROW_KEY && e.which !== ESCAPE_KEY && e.which !== ENTER_KEY) {\r\n                        if (settings.url) {\r\n                            resetSelection();\r\n                            if (timer) {\r\n                                clearTimeout(timer);\r\n                            }\r\n\r\n                            // set the request to be sent sent as the data parameter\r\n                            request[settings.paramName] = self.val();\r\n                            timer = setTimeout(function () {\r\n                                getSuggestions(settings.url)\r\n                            }, settings.delay);\r\n                        }\r\n\r\n                        // If filter set to true, call showSuggestions() - it will filter the results for us\r\n                        if (settings.filter) {\r\n                            showSuggestions();\r\n                        }\r\n                    }\r\n                },\r\n                keydown: function (e) {\r\n                    if ($suggestionBox.css('display') !== 'none') {\r\n                        if (e.which == DOWN_ARROW_KEY) {\r\n                            e.preventDefault();\r\n                            moveDown(true);\r\n                        }\r\n                        if (e.which == UP_ARROW_KEY) {\r\n                            e.preventDefault();\r\n                            moveUp(true);\r\n                        }\r\n                        if (e.which === ENTER_KEY && selectedLi > -1) {\r\n                            e.preventDefault();\r\n                            $suggestionBox.find('.selected a').click();\r\n                        }\r\n                        if (e.which == ESCAPE_KEY) {\r\n                            e.preventDefault();\r\n                            hideSuggestionBox();\r\n                        }\r\n                    }\r\n                },\r\n                paste: function () {\r\n                    // Simulate keyup after 200ms otherwise the value of the search box will not be available\r\n                    setTimeout(function () {\r\n                        self.keyup();\r\n                    }, 200);\r\n                }\r\n            });\r\n\r\n            // Reset the position of the suggestion box if the window is re-sized\r\n            $(window).resize(function () {\r\n                setSuggestionBoxPosition();\r\n            });\r\n\r\n            /**\r\n             * Performs the click action, this can be called for any event you want to recreate a click action for.\r\n             * @param e\r\n             */\r\n            function doClick(e) {\r\n                settings.onClick(e);\r\n            }\r\n\r\n            /**\r\n             * Is the given event made on a suggestion?\r\n             * @param e\r\n             * @returns {boolean}\r\n             */\r\n            function isSuggestion(e) {\r\n                return $(e.target).parents('a').length > 0 || e.target.nodeName === 'A';\r\n            }\r\n\r\n            /**\r\n             * Selects the suggestion at the given position\r\n             * @param position\r\n             */\r\n            function select(position, scroll) {\r\n                selectedHref = $suggestionBox.find(\"li:eq(\" + position + \") a\").attr('href');\r\n                $suggestionBox.find(\"li:eq(\" + position + \")\").addClass('selected');\r\n\r\n                if (scroll) {\r\n                    doScroll(position);\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Unselects the suggestion at the given position\r\n             * @param position\r\n             */\r\n            function unselect(position) {\r\n                $suggestionBox.find(\"li:eq(\" + position + \")\").removeClass('selected');\r\n            }\r\n\r\n            /**\r\n             * Resets any selected suggestions\r\n             */\r\n            function resetSelection() {\r\n                selectedHref = '#';\r\n                selectedLi = -1;\r\n                // remove all selected on reset\r\n                $suggestionBox.find('li').removeClass('selected');\r\n            }\r\n\r\n\r\n            /**\r\n             * Scrolls the suggestion box to the given position\r\n             * @param to\r\n             */\r\n            function doScroll(to) {\r\n                autoScrolled = true;\r\n\r\n                if (to > -1) {\r\n                    var pos = $suggestionBox.find('li:eq(' + to + ')').position().top -\r\n                        $suggestionBox.find('li:eq(0)').position().top;\r\n                }\r\n\r\n                // find scroll position at to and set scroll bars to it\r\n                var scrollTo = (to > -1) ? pos : 0;\r\n                $suggestionBox.scrollTop(scrollTo);\r\n            }\r\n\r\n            /**\r\n             * Moves the selection down to the next suggestion\r\n             */\r\n            function moveDown(scroll) {\r\n                var listSize = $suggestionBox.find('li').size();\r\n\r\n                if (selectedLi === (listSize - 1)) {\r\n                    unselect(selectedLi);\r\n                    resetSelection();\r\n                } else {\r\n                    unselect(selectedLi);\r\n                    selectedLi++;\r\n                    select(selectedLi);\r\n                }\r\n\r\n                if (scroll) {\r\n                    doScroll(selectedLi);\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Moves the selection up to the previous suggestions\r\n             */\r\n            function moveUp(scroll) {\r\n                if (selectedLi > 0) {\r\n                    unselect(selectedLi);\r\n                    selectedLi--;\r\n                    select(selectedLi);\r\n                } else if (selectedLi == -1) {\r\n                    unselect(selectedLi);\r\n                    selectedLi = $suggestionBox.find('li').size() - 1;\r\n                    select(selectedLi);\r\n                } else {\r\n                    unselect(0);\r\n                    resetSelection();\r\n                }\r\n\r\n                if (scroll) {\r\n                    doScroll(selectedLi);\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Redirects the user to the selected suggestion location\r\n             */\r\n            function goToSelection() {\r\n                window.location = selectedHref;\r\n            }\r\n\r\n            /**\r\n             * Makes an ajax call to the given url\r\n             * @param url\r\n             */\r\n            function getSuggestions(url) {\r\n                ajaxCalledVal = self.val();\r\n                $.ajax({\r\n                    url: url,\r\n                    data: request,\r\n                    dataType: 'json',\r\n                    success: function (data) {\r\n\r\n                        var selectionHasChanged = true;\r\n                        var currentLi = selectedLi;\r\n\r\n                        if (jsonData.results && data.results) {\r\n                            selectionHasChanged = (JSON.stringify(jsonData.results[selectedLi]) !== JSON.stringify(data.results[selectedLi]))\r\n                        }\r\n\r\n                        setJsonData(data);\r\n                        showSuggestions();\r\n\r\n                        // Keep selection if no new information has been entered since ajax was called and the selection is the same.\r\n                        // This prevents the flick back effect when menu has the same data but the ajax hasn't finished.\r\n                        if (currentLi > -1 && (self.val() === ajaxCalledVal) && !selectionHasChanged) {\r\n                            selectedLi = currentLi;\r\n                            select(selectedLi);\r\n                        }\r\n\r\n                        settings.ajaxSuccess(data);\r\n                    },\r\n                    error: function (e) {\r\n                        settings.ajaxError(e);\r\n                    }\r\n                });\r\n            }\r\n\r\n            /**\r\n             * Returns the index of the list item the mouse is currently hovering over\r\n             * @param e\r\n             * @returns {Number}\r\n             */\r\n            function getSelectionMouseIsOver(e) {\r\n                var $parentLi = $(e.target).parents('li');\r\n                return $parentLi.parent().children().index($parentLi);\r\n            }\r\n\r\n            /**\r\n             * Sets the position of the suggestion box\r\n             */\r\n            function setSuggestionBoxPosition() {\r\n                var borders = getCssValue(self, 'border-bottom-width') + getCssValue(self, 'border-top-width');\r\n                var padding = getCssValue(self, 'padding-bottom') + getCssValue(self, 'padding-top');\r\n\r\n                $suggestionBox.css({\r\n                    'position': 'absolute',\r\n                    'left': (self.offset().left) + settings.leftOffset,\r\n                    'top': (self.offset().top) + (self.height() + borders + padding + settings.topOffset)\r\n                });\r\n\r\n            }\r\n\r\n            /**\r\n             * Gets the css integer value for the given element.\r\n             * @param element\r\n             * @param name\r\n             * @returns {Number}\r\n             */\r\n            function getCssValue(element, name) {\r\n                return parseInt(element.css(name).replace('px', ''));\r\n            }\r\n\r\n            /**\r\n             * Hides the suggestion box\r\n             */\r\n            function hideSuggestionBox() {\r\n                $suggestionBox.scrollTop(0);\r\n\r\n                if (settings.fadeOut) {\r\n                    $suggestionBox.fadeOut();\r\n                } else {\r\n                    $suggestionBox.css('display', 'none');\r\n                }\r\n                resetSelection();\r\n\r\n                if (settings.adjustBorderRadius) {\r\n                    self.css('border-bottom-left-radius', searchBoxBorderRadius.bottomLeft);\r\n                    self.css('border-bottom-right-radius', searchBoxBorderRadius.bottomRight);\r\n                }\r\n\r\n                settings.onHide()\r\n            }\r\n\r\n            /**\r\n             * Displays the suggestion-box\r\n             */\r\n            function showSuggestionBox() {\r\n                if (settings.fadeIn) {\r\n                    $suggestionBox.fadeIn();\r\n                } else {\r\n                    $suggestionBox.css('display', 'block');\r\n                }\r\n\r\n                if (settings.adjustBorderRadius) {\r\n                    self.css('border-bottom-left-radius', 0);\r\n                    self.css('border-bottom-right-radius', 0);\r\n                }\r\n\r\n                settings.onShow();\r\n\r\n            }\r\n\r\n            /**\r\n             * Sets the width of the suggestion box\r\n             */\r\n            function setSuggestionBoxWidth() {\r\n                var searchBoxWidth = getSearchBoxWidth() + settings.widthAdjustment;\r\n                if (settings.menuWidth == 'auto') {\r\n                    $suggestionBox.css({\r\n                        'min-width': searchBoxWidth\r\n                    });\r\n                } else if (settings.menuWidth == 'constrain') {\r\n                    $suggestionBox.css({\r\n                        'width': searchBoxWidth\r\n                    });\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Returns the width of the search box\r\n             * @returns {number}\r\n             */\r\n            function getSearchBoxWidth() {\r\n                return (\r\n                    self.width() +\r\n                    getCssValue(self, 'border-left-width') +\r\n                    getCssValue(self, 'border-right-width') +\r\n                    getCssValue(self, 'padding-left') +\r\n                    getCssValue(self, 'padding-right')\r\n                );\r\n            }\r\n\r\n            /**\r\n             * Builds the attributes from the JSON\r\n             * @param value\r\n             * @param attr\r\n             * @returns {*}\r\n             */\r\n            function createAttributes(value, attr) {\r\n                $.each(value.attr, function (key, value) {\r\n                    var keys = Object.keys(value);\r\n                    for (var i = 0; i < keys.length; i++) {\r\n                        attr += keys[i] + '=\"' + value[keys[i]] + '\" '\r\n                    }\r\n                });\r\n                return attr;\r\n            }\r\n\r\n            /**\r\n             * Adds any given custom values from the JSON file\r\n             * @param value\r\n             * @param $suggestions\r\n             * @returns {*}\r\n             */\r\n            function createCustomValues(value, $suggestions) {\r\n                for (var i = 0; i < settings.customData.length; i++) {\r\n                    var custom = value[settings.customData[i]];\r\n                    if (custom) {\r\n                        $suggestions += value[settings.customData[i]];\r\n                    }\r\n                }\r\n\r\n                return $suggestions;\r\n            }\r\n\r\n            /**\r\n             * Builds the suggestions list from the JSON\r\n             * @param data\r\n             * @returns {string}\r\n             */\r\n            function createSuggestionsList(data) {\r\n\r\n                var $suggestions = '<div class=\"suggestion-header\">' + settings.heading + '</div> ' +\r\n                    '<ul class=\"suggestion-box-list\">';\r\n\r\n                $.each(data.results, function (key, value) {\r\n                    if (value.suggestion && value.url) {\r\n                        matches = true;\r\n                        var attr = \"\";\r\n                        if (value.attr) {\r\n                            attr = createAttributes(value, attr);\r\n                        }\r\n                        $suggestions += '<li><a href=\"' + value.url + '\" ' + attr + '>' + value.suggestion;\r\n\r\n                        if (settings.customData.length > 0) {\r\n                            $suggestions = createCustomValues(value, $suggestions);\r\n                        }\r\n                        $suggestions += '</a></li>';\r\n                    } else {\r\n                        return false;\r\n                    }\r\n\r\n                    // break when maximum results have been found\r\n                    if (key === (settings.results - 1)) {\r\n                        return false;\r\n                    }\r\n                });\r\n                $suggestions += '</ul>';\r\n\r\n                return $suggestions;\r\n            }\r\n\r\n            function getNoSuggestionMarkup() {\r\n                $suggestionBox.html('<div class=\"no-suggestions\">' + settings.noSuggestionsMessage + '</div>');\r\n            }\r\n\r\n            /**\r\n             * Shows the suggestion-box suggestions if they are available based on the data passed in\r\n             */\r\n            function showSuggestions(forceShow) {\r\n                resetSelection();\r\n\r\n                matches = false;\r\n\r\n                var data = (settings.filter) ? filterResults(self.val()) : jsonData;\r\n\r\n                if (data) {\r\n                    if (data.results) {\r\n                        var $suggestions = createSuggestionsList(data);\r\n                    }\r\n                }\r\n\r\n                // Check for focus before showing suggestion box. User could have clicked outside before request finished.\r\n                if (active || forceShow) {\r\n                    if (matches) {\r\n                        // we have some suggestions, so show them\r\n                        $suggestionBox.html($suggestions);\r\n                        setSuggestionBoxWidth();\r\n                        showSuggestionBox();\r\n                    } else if (forceShow) {\r\n                        // We don't have any suggestions, but we are forcing display, show it regardless.\r\n                        if (settings.showNoSuggestionsMessage) {\r\n                            getNoSuggestionMarkup();\r\n                        }\r\n                        setSuggestionBoxWidth();\r\n                        showSuggestionBox();\r\n                    } else if (settings.showNoSuggestionsMessage && self.val().length > 0) {\r\n                        // We don't have any suggestions for input and want to display no suggestion message\r\n                        setSuggestionBoxWidth();\r\n                        showSuggestionBox();\r\n                        getNoSuggestionMarkup();\r\n                    } else {\r\n                        // Nope,no matches, hide the suggestion box\r\n                        hideSuggestionBox();\r\n                    }\r\n                } else {\r\n                    // The search box no longer has focus, hide the suggestion box\r\n                    hideSuggestionBox();\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Sets the current JSON data ready for display\r\n             * @param json\r\n             */\r\n            function setJsonData(json) {\r\n                if (json) {\r\n                    jsonData = (json instanceof Object) ? json : $.parseJSON(json);\r\n                } else {\r\n                    jsonData = {};\r\n                }\r\n\r\n                if (settings.sort && jsonData.results) {\r\n                    jsonData.results.sort(settings.sort);\r\n                }\r\n            }\r\n\r\n\r\n            /**\r\n             * Loads JSON from the given url\r\n             * @param url\r\n             */\r\n            function loadJson(url) {\r\n                $.ajax({\r\n                    url: url,\r\n                    dataType: 'json',\r\n                    success: function (data) {\r\n                        setJsonData(data);\r\n                    },\r\n                    error: function (e) {\r\n                        console.log(e);\r\n                    }\r\n                });\r\n            }\r\n\r\n            /**\r\n             * Filters the JSON based on the user input\r\n             * @param value\r\n             * @returns {Object}\r\n             */\r\n            function filterResults(value) {\r\n                var data;\r\n\r\n                value = value.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\r\n                filterPattern = settings.filterPattern.replace(\"{INPUT}\", value);\r\n\r\n                if (!value) {\r\n                    // we weren't passed anything to filter against, return empty object\r\n                    return {};\r\n                }\r\n                if (jsonData) {\r\n                    if (jsonData.results) {\r\n                        // We have JSON data and user input, so apply the filter\r\n                        var regex = new RegExp(filterPattern, \"i\");\r\n                        data = $.grep(jsonData.results, function (name) {\r\n                            return regex.test(name.suggestion);\r\n                        });\r\n                    }\r\n                }\r\n                // Sort the results, if sort function passed\r\n                if (settings.sort) {\r\n                    data.sort(settings.sort);\r\n                }\r\n\r\n                var json = JSON.stringify({\"results\": data});\r\n\r\n                return $.parseJSON(json);\r\n            }\r\n\r\n            // returned methods\r\n            return {\r\n                getSuggestions: function (url) {\r\n                    getSuggestions(url);\r\n                    return this;\r\n                },\r\n                addSuggestions: function (json) {\r\n                    setJsonData(json);\r\n                    return this;\r\n                },\r\n                loadSuggestions: function (url) {\r\n                    loadJson(url);\r\n                    return this;\r\n                },\r\n                getJson: function () {\r\n                    return JSON.stringify(jsonData);\r\n                },\r\n                moveUp: function () {\r\n                    moveUp();\r\n                    return this;\r\n                },\r\n                moveDown: function () {\r\n                    moveDown();\r\n                    return this;\r\n                },\r\n                selectedUrl: function () {\r\n                    return selectedHref;\r\n                },\r\n                selectedSuggestion: function () {\r\n                    return $suggestionBox.find('li:eq(' + selectedLi + ')').text();\r\n                },\r\n                position: function () {\r\n                    return selectedLi;\r\n                },\r\n                select: function (position) {\r\n                    unselect(selectedLi);\r\n                    selectedLi = position;\r\n                    select(position, settings.scrollable);\r\n                    return this;\r\n                },\r\n                reset: function () {\r\n                    unselect(selectedLi);\r\n                    resetSelection();\r\n                    return this;\r\n                },\r\n                show: function (force) {\r\n                    force = (force) ? force : false;\r\n                    showSuggestions(force);\r\n                    return this;\r\n                },\r\n                hide: function () {\r\n                    hideSuggestionBox();\r\n                    return this;\r\n                },\r\n                getId: function (withHash) {\r\n                    return (withHash) ? '#' + randId : randId;\r\n                },\r\n                reservedKey: function (e) {\r\n                    var key = e.which;\r\n                    return key === ENTER_KEY || key === ESCAPE_KEY || key === UP_ARROW_KEY || key === DOWN_ARROW_KEY\r\n                },\r\n                getContext: function () {\r\n                    return self;\r\n                },\r\n                destroy: function () {\r\n                    self.unbind(this);\r\n                    $suggestionBox.remove();\r\n                    return null;\r\n                },\r\n                set: function (option, value) {\r\n                    settings[option] = value;\r\n                    _setup();\r\n                }\r\n            };\r\n        }\r\n    }(jQuery)\r\n);"],"sourceRoot":"/source/"}