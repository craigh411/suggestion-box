{"version":3,"names":[],"mappings":"","sources":["main.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Anubis = function () {\n    function Anubis(searchBy, filter, sort, param) {\n        _classCallCheck(this, Anubis);\n\n        this.searchBy = searchBy;\n        this.filter = filter;\n        this.sort = sort;\n        this.search = \"\";\n        this.param = param || 'search';\n        this.debug = false; // flag for showing debug messages from ajax call\n        this.lastSearch = \"\";\n    }\n\n    _createClass(Anubis, [{\n        key: \"setDebug\",\n        value: function setDebug(debug) {\n            this.debug = debug;\n        }\n    }, {\n        key: \"setData\",\n        value: function setData(data) {\n            this.data = data;\n        }\n    }, {\n        key: \"getData\",\n        value: function getData() {\n            return this.data;\n        }\n    }, {\n        key: \"setSearchBy\",\n        value: function setSearchBy(searchBy) {\n            this.searchBy = searchBy;\n        }\n    }, {\n        key: \"getSearchBy\",\n        value: function getSearchBy() {\n            return this.searchBy;\n        }\n    }, {\n        key: \"getSuggestions\",\n        value: function getSuggestions() {\n            return this.filterData();\n        }\n    }, {\n        key: \"setSearch\",\n        value: function setSearch(search) {\n            // Escape any regex patterns as search string\n            var santizedSearch = search.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n            this.search = santizedSearch;\n        }\n    }, {\n        key: \"getSearch\",\n        value: function getSearch() {\n            return this.search;\n        }\n    }, {\n        key: \"setFilter\",\n        value: function setFilter(filter) {\n            this.filter = filter;\n        }\n    }, {\n        key: \"getFilter\",\n        value: function getFilter() {\n            return this.filter;\n        }\n    }, {\n        key: \"setSort\",\n        value: function setSort(sort) {\n            this.sort = sort;\n        }\n    }, {\n        key: \"getSort\",\n        value: function getSort() {\n            return this.sort;\n        }\n    }, {\n        key: \"filterData\",\n        value: function filterData() {\n            var _this = this;\n\n            var filterPattern = this.filter.replace('{{INPUT}}', this.search);\n            var regex = new RegExp(filterPattern, \"i\");\n            var results = [];\n\n            if (this.data && this.search.length > 0) {\n                results = $.grep(this.data, function (item) {\n                    return (typeof item === \"undefined\" ? \"undefined\" : _typeof(item)) === \"object\" ? regex.test(item[_this.searchBy]) : regex.test(item);\n                });\n            }\n\n            results = this.sortData(results);\n\n            return results;\n        }\n    }, {\n        key: \"sortData\",\n        value: function sortData(data) {\n            return data.sort(this.sort);\n        }\n    }, {\n        key: \"getParam\",\n        value: function getParam() {\n            return this.param;\n        }\n    }, {\n        key: \"setParam\",\n        value: function setParam(param) {\n            this.param = param;\n        }\n    }, {\n        key: \"getLastSearch\",\n        value: function getLastSearch() {\n            return this.lastSearch;\n        }\n    }, {\n        key: \"clearLastSearch\",\n        value: function clearLastSearch() {\n            this.lastSearch = \"\";\n        }\n    }, {\n        key: \"killCurrentFetch\",\n        value: function killCurrentFetch() {\n            if (this.xhr != undefined) {\n                this.xhr.abort();\n            }\n        }\n\n        // Fetches suggestions from the given url\n\n    }, {\n        key: \"fetchSuggestions\",\n        value: function fetchSuggestions(url, callback) {\n            this.lastSearch = this.search;\n\n            this.killCurrentFetch();\n            var request = {};\n            request[this.param] = this.search;\n\n            this.xhr = $.ajax({\n                url: url,\n                method: 'get',\n                dataType: 'json',\n                data: request,\n                success: callback\n            });\n\n            if (this.xhr && this.debug) {\n                this.xhr.fail(function (data) {\n                    console.log('[Ajax Error]:');\n                    console.log(data);\n                });\n            }\n        }\n    }]);\n\n    return Anubis;\n}();\n\nexports.default = Anubis;\n\n},{}],2:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _util = require('./util.js');\n\nvar _util2 = _interopRequireDefault(_util);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\r\n * Class to build the dropdown $menu\r\n */\nvar Dropdown = function () {\n    function Dropdown(options, id) {\n        _classCallCheck(this, Dropdown);\n\n        this.id = id || this._getRandId();\n        this.mouseHover = false;\n        this.options = options;\n        this.selectedLi = -1;\n        this.autoScrolled = false; // Whether or not the scroll action was done progrmatically\n\n\n        this.$menu = $('<div id=\"' + this.id + '\" class=\"suggestion-box\"></div>').appendTo('body');\n        this.buildDom();\n    }\n\n    /*\r\n     * Builds the HTML for the suggestion list and binds the events\r\n     */\n\n\n    _createClass(Dropdown, [{\n        key: 'buildDom',\n        value: function buildDom() {\n            if (this.options.height) {\n                this.$menu.css('max-height', this.options.height);\n            }\n\n            if (this.options.scrollable) {\n                this.$menu.css('overflow', 'auto');\n            } else {\n                this.$menu.css('overflow', 'hidden');\n            }\n\n            this._bindEvents();\n        }\n    }, {\n        key: '_bindEvents',\n        value: function _bindEvents() {\n            this.$menu.unbind();\n            this.$menu.on('mousemove', this.mousemoveEvents.bind(this));\n            this.$menu.on('mouseout', this.mouseoutEvents.bind(this));\n            this.$menu.on('click', this.clickEvents.bind(this));\n        }\n\n        /*\r\n         * Destroys the dropdown $menu\r\n         */\n\n    }, {\n        key: 'destroy',\n        value: function destroy() {\n            this.$menu.unbind();\n            $('#' + this.id).remove();\n        }\n\n        /**\r\n         *  Selects the item at the given position\r\n         */\n\n    }, {\n        key: 'select',\n        value: function select(position, scroll) {\n            this.$menu.find(\"#suggestion-list > li:eq(\" + position + \")\").addClass('selected');\n\n            if (scroll) {\n                this.doScroll();\n            }\n        }\n\n        /**\r\n         *  Unselects the item at the given postion\r\n         */\n\n    }, {\n        key: 'unselect',\n        value: function unselect(position) {\n            this.$menu.find(\"#suggestion-list > li:eq(\" + position + \")\").removeClass('selected');\n        }\n\n        /**\r\n         * Events for when the mouse leaves the suggestion box\r\n         */\n\n    }, {\n        key: 'mouseoutEvents',\n        value: function mouseoutEvents(event) {\n            this.mouseHover = false;\n        }\n\n        /**\r\n         * Events for clicks inside the suggestion box\r\n         * @param e\r\n         */\n\n    }, {\n        key: 'clickEvents',\n        value: function clickEvents(event) {\n            if (this.isSuggestion(event)) {\n                event.preventDefault();\n                this.doClick(event);\n            }\n        }\n\n        /**\r\n         * Performs the click action, this can be called for any event you want to recreate a click action for.\r\n         * @param e\r\n         */\n\n    }, {\n        key: 'doClick',\n        value: function doClick(event) {\n            event.preventDefault();\n        }\n\n        /**\r\n         * Events for the mouse moving inside the suggestion box\r\n         * @param e\r\n         */\n\n    }, {\n        key: 'mousemoveEvents',\n        value: function mousemoveEvents(event) {\n            if (this.isSuggestion(event) && !this.autoScrolled) {\n                this.unselect(this.selectedLi);\n                this.selectedLi = this.getSelectionMouseIsOver(event);\n                this.select(this.selectedLi);\n            }\n\n            this.mouseHover = true;\n            this.autoScrolled = false;\n        }\n\n        /**\r\n         * Returns the index of the list item the mouse is currently hovering over\r\n         * @param e\r\n         * @returns {Number}\r\n         */\n\n    }, {\n        key: 'getSelectionMouseIsOver',\n        value: function getSelectionMouseIsOver(e) {\n            var $parentLi = $(e.target).parents('li');\n\n            return $parentLi.parent().children().index($parentLi);\n        }\n\n        /**\r\n         * Is the given event made on a suggestion (targets anchor tag)?\r\n         * @param e\r\n         * @returns {boolean}\r\n         */\n\n    }, {\n        key: 'isSuggestion',\n        value: function isSuggestion(event) {\n            return $(event.target).parents('a').length > 0 || event.target.nodeName === 'A';\n        }\n    }, {\n        key: 'resetSelection',\n        value: function resetSelection() {\n            this.selectedLi = -1;\n            // remove all selected on reset\n            this.$menu.find('#suggestion-list > li').removeClass('selected');\n        }\n    }, {\n        key: 'getSelectedItemIndex',\n        value: function getSelectedItemIndex() {\n            return this.selectedLi;\n        }\n\n        /**\r\n         * Scrolls the suggestion box to the given position\r\n         * @param to\r\n         */\n\n    }, {\n        key: 'doScroll',\n        value: function doScroll() {\n            this.autoScrolled = true;\n\n            if (this.selectedLi > -1) {\n                var selection = this.$menu.find('#suggestion-list > li:eq(' + this.selectedLi + ')').position();\n\n                var pos = selection ? selection.top - this.$menu.find('#suggestion-list > li:eq(0)').position().top : 0;\n            }\n\n            // find scroll position at to and set scroll bars to it\n            var scrollTo = this.selectedLi > -1 ? pos : 0;\n            this.$menu.scrollTop(scrollTo);\n        }\n    }, {\n        key: 'isOpen',\n        value: function isOpen() {\n            return this.$menu.css('display') !== 'none';\n        }\n\n        /*\r\n         * Returns true if the mouse is over the dropdown list\r\n         */\n\n    }, {\n        key: 'isHovering',\n        value: function isHovering() {\n            return this.mouseHover;\n        }\n    }, {\n        key: '_getRandId',\n        value: function _getRandId() {\n            return 'suggestion-box-' + Math.floor(Math.random() * 10000000);\n        }\n    }, {\n        key: 'getId',\n        value: function getId(withHash) {\n            return withHash ? '#' + this.id : this.id;\n        }\n    }]);\n\n    return Dropdown;\n}();\n\nexports.default = Dropdown;\n\n},{\"./util.js\":12}],3:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _Dropdown2 = require('./Dropdown');\n\nvar _Dropdown3 = _interopRequireDefault(_Dropdown2);\n\nvar _util = require('./util');\n\nvar _util2 = _interopRequireDefault(_util);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/*\r\n/ @class SuggestionListDropdown - builds the SuggestionList Dom object\r\n*/\n\nvar SuggestionList = function (_Dropdown) {\n    _inherits(SuggestionList, _Dropdown);\n\n    function SuggestionList(inputEl, templateParser, options, typeahead, suggestions) {\n        _classCallCheck(this, SuggestionList);\n\n        var _this = _possibleConstructorReturn(this, (SuggestionList.__proto__ || Object.getPrototypeOf(SuggestionList)).call(this, options));\n\n        _this.inputEl = inputEl;\n        _this.templateParser = templateParser;\n        _this.typeahead = typeahead;\n        _this.suggestions = suggestions;\n        _this.suggestionChosen = false;\n        return _this;\n    }\n\n    /**\r\n     * Reset the template by creating a new Template object, this is necassary because template\r\n     * Parser automtically parses the node tree, so it doesn't have to be done multiple times.\r\n     */\n\n\n    _createClass(SuggestionList, [{\n        key: 'setTemplate',\n        value: function setTemplate(templateParser) {\n            this.templateParser = templateParser;\n        }\n    }, {\n        key: 'setOptions',\n        value: function setOptions(options) {\n            this.options = options;\n        }\n    }, {\n        key: 'updatePosition',\n        value: function updatePosition(left, top) {\n            this.$menu.css({\n                'position': 'absolute',\n                'zIndex': this.options.zIndex,\n                'left': left,\n                'top': top\n            });\n        }\n\n        /*\r\n         * Show the suggestion box\r\n         */\n\n    }, {\n        key: 'show',\n        value: function show() {\n\n            // Don't reset if a suggestion is still available at the index it's annoying when trying to select while data is loading\n            if (this.suggestions.getSuggestions().length < this.selectedLi) {\n                this.selectedLi = -1;\n            }\n\n            this.renderSuggestionsList();\n            // Reset selection after page loaded\n            if (this.selectedLi > -1) {\n                this.select(this.selectedLi);\n            }\n\n            if (this.$menu.css('display') === 'none') {\n                this.$menu.fadeIn();\n            }\n        }\n\n        /**\r\n         * Sets the width of the suggestion box\r\n         */\n\n    }, {\n        key: 'setWidth',\n        value: function setWidth(searchBoxWidth) {\n            var width = {};\n            width[this.options.widthType] = searchBoxWidth;\n            this.$menu.css(width);\n        }\n\n        /*\r\n         * Hide the suggestion list\r\n         */\n\n    }, {\n        key: 'hide',\n        value: function hide() {\n            this.selectedLi = -1;\n            this.$menu.css('display', 'none');\n        }\n    }, {\n        key: '_buildMarkupForObjectList',\n        value: function _buildMarkupForObjectList(templateItems, item, markup) {\n            var _this2 = this;\n\n            templateItems.forEach(function (templateItem) {\n                var itemVal = _this2.options.highlightMatch && templateItem === _this2.options.searchBy ? _this2.highlightMatches(item[templateItem]) : item[templateItem];\n                markup = _this2.templateParser.replaceHandlebars(markup, templateItem, itemVal);\n            });\n\n            return markup;\n        }\n    }, {\n        key: '_buildSuggestionListMarkup',\n        value: function _buildSuggestionListMarkup(markup, listMarkup) {\n            var _this3 = this;\n\n            var markupDom = $(markup);\n            this.templateParser.getConditionals().forEach(function (conditional) {\n                var expression = markupDom.find('#' + conditional.id).attr('sb-show');\n\n                if (!_this3.displayEl(expression)) {\n                    markupDom.find('#' + conditional.id).css('display', 'none');\n                }\n            });\n\n            listMarkup += \"<li>\";\n            listMarkup += markupDom[0].outerHTML;\n            listMarkup += \"</li>\";\n\n            return listMarkup;\n        }\n    }, {\n        key: '_buildMarkup',\n        value: function _buildMarkup(listItemMarkup, item) {\n            var markup = listItemMarkup;\n\n            if ((typeof item === 'undefined' ? 'undefined' : _typeof(item)) == \"object\") {\n                var templateItems = this.templateParser.getTemplatedItems(listItemMarkup);\n                markup = this._buildMarkupForObjectList(templateItems, item, markup);\n            } else {\n                var suggestion = this.options.highlightMatch ? this.highlightMatches(item) : item;\n                markup = this.templateParser.replaceHandlebars(markup, this.options.searchBy, suggestion);\n                markup = this.templateParser.replaceHandlebars(markup, \"url\", \"#\");\n            }\n\n            return markup;\n        }\n    }, {\n        key: 'renderSuggestionsList',\n        value: function renderSuggestionsList() {\n            var _this4 = this;\n\n            var suggestions = this.suggestions.getSuggestions().slice(0, this.options.results);\n\n            var template = this.templateParser.getParsedTemplate();\n            var listItemMarkup = this.templateParser.getListItemMarkup();\n            var listMarkup = \"\";\n\n            suggestions.forEach(function (item) {\n                var markup = _this4._buildMarkup(listItemMarkup, item);\n                listMarkup = _this4._buildSuggestionListMarkup(markup, listMarkup);\n            });\n\n            var suggestionMarkup = this.templateParser.replaceHandlebars(template, \"suggestion_list\", listMarkup);\n\n            this.$menu.html(suggestionMarkup);\n        }\n    }, {\n        key: '_renderObjectList',\n        value: function _renderObjectList() {}\n    }, {\n        key: 'displayEl',\n        value: function displayEl(expression) {\n            try {\n                return new Function(\"return \" + expression + \"? true : false\")();\n            } catch (e) {\n                _util2.default.logger(this.options.debug, 'Invalid \"sb-show\" expression in template. Remember to wrap any strings in quotes even if they are template items.', 'warn');\n            }\n        }\n\n        /*\r\n         * Highlights parts of the suggestion that match the given input and pattern\r\n         * @param string suggestion\r\n         */\n\n    }, {\n        key: 'highlightMatches',\n        value: function highlightMatches(suggestion) {\n            // Replace all \n            var filterPattern = this.templateParser.replaceHandlebars(this.options.filter, \"INPUT\", this.inputEl.val());\n            return suggestion.replace(new RegExp(filterPattern, 'gi'), '<b>$&</b>');\n        }\n\n        /**\r\n         * Selects the suggestion at the given position\r\n         * @param int position\r\n         * @param bool scroll\r\n         */\n\n    }, {\n        key: 'select',\n        value: function select(position, scroll) {\n            _get(SuggestionList.prototype.__proto__ || Object.getPrototypeOf(SuggestionList.prototype), 'select', this).call(this, position, scroll);\n\n            var value = this.typeahead.getTypeahead(position);\n            this.typeahead.updateTypeahead(value, this.suggestions.getSuggestions()[position]);\n        }\n\n        /**\r\n         * Moves the selection down to the next suggestion\r\n         * @param bool scroll\r\n         */\n\n    }, {\n        key: 'moveDown',\n        value: function moveDown(scroll) {\n            var listSize = this.$menu.find('#suggestion-list > li').length;\n\n            if (!this.isOpen() && this.suggestions.getSuggestions().length > 0) {\n                this.show();\n            } else if (this.selectedLi === listSize - 1) {\n                this.unselect(this.selectedLi);\n                this.resetSelection();\n            } else {\n                this.unselect(this.selectedLi);\n                this.selectedLi++;\n                this.select(this.selectedLi);\n            }\n\n            if (scroll) {\n                this.doScroll();\n            }\n        }\n\n        /**\r\n         * Moves the selection up to the previous suggestions\r\n         * @param bool scroll\r\n         */\n\n    }, {\n        key: 'moveUp',\n        value: function moveUp(scroll) {\n            if (this.selectedLi > 0) {\n                this.unselect(this.selectedLi);\n                this.selectedLi--;\n                this.select(this.selectedLi);\n            } else if (this.selectedLi == -1) {\n                this.unselect(this.selectedLi);\n                this.selectedLi = this.$menu.find('#suggestion-list > li').length - 1;\n                this.select(this.selectedLi);\n            } else {\n                this.unselect(0);\n                this.resetSelection();\n            }\n\n            if (scroll) {\n                this.doScroll();\n            }\n        }\n\n        /**\r\n         * Events for when the mouse leaves the suggestion box\r\n         * @param e\r\n         */\n\n    }, {\n        key: 'mouseoutEvents',\n        value: function mouseoutEvents(e) {\n            _get(SuggestionList.prototype.__proto__ || Object.getPrototypeOf(SuggestionList.prototype), 'mouseoutEvents', this).call(this, e);\n\n            if (this.isSuggestion(e) && !this.autoScrolled) {\n                this.unselect(this.selectedLi);\n                this.resetSelection();\n            } else if ($(':focus').attr('id') !== this.inputEl.attr('id')) {\n                // We're out of the suggestion box so re-focus on search\n                this.inputEl.focus();\n            }\n            this.mouseHover = false;\n        }\n\n        /**\r\n         * Performs the click action, this can be called for any event you want to recreate a click action for.\r\n         * @param Event event\r\n         */\n\n    }, {\n        key: 'doClick',\n        value: function doClick(event) {\n            _get(SuggestionList.prototype.__proto__ || Object.getPrototypeOf(SuggestionList.prototype), 'doClick', this).call(this, event);\n\n            var suggestion = this.suggestions.getSuggestions()[this.selectedLi];\n            var selectedEl = this.$menu.find('#suggestion-list > li:eq(' + this.selectedLi + ')');\n\n            // TODO: Make sure this callback works for non-object arrays!\n            this.options.onClick(suggestion[this.options.searchBy], suggestion, event, this.inputEl, selectedEl);\n            this.hide();\n\n            this.setIsSuggestionChosen(true);\n\n            this.typeahead.removeTypeahead();\n        }\n\n        /**\r\n         * Returns true if a suggestion has been chosen, this flag is used during ajax calls so the menu\r\n         *  isn't shown when new options are loaded from the server after the user has chosen an suggestion.\r\n         */\n\n    }, {\n        key: 'isSuggestionChosen',\n        value: function isSuggestionChosen() {\n            return this.suggestionChosen;\n        }\n\n        /**\r\n         * Set the suggestionChosen flag\r\n         * @param bool suggestionChosen \r\n         */\n\n    }, {\n        key: 'setIsSuggestionChosen',\n        value: function setIsSuggestionChosen(suggestionChosen) {\n            this.suggestionChosen = suggestionChosen;\n        }\n    }]);\n\n    return SuggestionList;\n}(_Dropdown3.default);\n\nexports.default = SuggestionList;\n\n},{\"./Dropdown\":2,\"./util\":12}],4:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Suggestions = function () {\n\tfunction Suggestions() {\n\t\t_classCallCheck(this, Suggestions);\n\n\t\tthis.suggestions = [];\n\t}\n\n\t_createClass(Suggestions, [{\n\t\tkey: \"setSuggestions\",\n\t\tvalue: function setSuggestions(suggestions) {\n\t\t\tthis.suggestions = suggestions;\n\t\t}\n\t}, {\n\t\tkey: \"getSuggestions\",\n\t\tvalue: function getSuggestions() {\n\t\t\treturn this.suggestions;\n\t\t}\n\t}]);\n\n\treturn Suggestions;\n}();\n\nexports.default = Suggestions;\n\n},{}],5:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _util = require('./util.js');\n\nvar _util2 = _interopRequireDefault(_util);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar TemplateParser = function () {\n    function TemplateParser(template, debug) {\n        _classCallCheck(this, TemplateParser);\n\n        this.debug = debug || false;\n        this.template = template;\n        this.nodes = [];\n        this.conditionals = [];\n\n        this._getNodes();\n        this._getConditionals();\n        this._getTemplateForListItem();\n        this._removeListItemMarkup();\n        this._removeRootElement();\n    }\n\n    _createClass(TemplateParser, [{\n        key: '_getTemplateForListItem',\n        value: function _getTemplateForListItem() {\n            var listItem = \"\";\n\n            var html = $.parseHTML($.trim(this.template));\n            var el = html ? html[0] : [];\n\n            if (html.length !== 1 && this.debug) {\n                _util2.default.logger(this.debug, 'Unable to parse template. Template must have one root element.', 'error');\n            }\n\n            if ((el.id !== \"\" || el.class !== undefined) && this.debug) {\n                _util2.default.logger(this.debug, 'Avoid adding style attributes such as \"class\", \"id\" or \"style\" to root element in template because these tags will be stripped.', 'warn');\n            }\n\n            if (el.childNodes.length > 0) {\n                $.each(el.childNodes, function (i, el) {\n                    if (el.id === \"suggestion-list\") {\n                        $.each(el.childNodes, function (i, el) {\n                            if (el.nodeName === \"LI\") {\n                                listItem = el.innerHTML;\n                            }\n                        });\n                    }\n                });\n            }\n\n            this.listItem = listItem;\n        }\n\n        // returns an arroy of names for items that are inside handlebars\n\n    }, {\n        key: 'getTemplatedItems',\n        value: function getTemplatedItems(str) {\n            var regex = new RegExp(\"@?{{\\\\s?[a-z0-9_-]+\\\\s?}}\", \"ig\");\n            var items = str.match(regex);\n\n            var itemNames = [];\n\n            items.forEach(function (item) {\n                item = item.replace(new RegExp(\"@?{{\\\\s?\"), \"\");\n                item = item.replace(new RegExp(\"\\\\s?}}\"), \"\");\n                itemNames.push(item);\n            });\n\n            return itemNames;\n        }\n    }, {\n        key: '_getConditionals',\n        value: function _getConditionals() {\n            var _this = this;\n\n            this.nodes.forEach(function (node) {\n                if (node.attributes.length > 0) {\n                    for (var i = 0; i < node.attributes.length; i++) {\n                        if (node.attributes[i].nodeName === \"sb-show\") {\n                            var id = $(node).attr('id') || 'sb' + Math.floor(Math.random() * 10000000);\n\n                            // Add the id to the template\n                            _this.template = _this.template.replace($(node)[0].outerHTML, $(node).attr('id', id)[0].outerHTML);\n                            _this.conditionals.push({ 'id': id });\n                        }\n                    }\n                }\n            });\n        }\n    }, {\n        key: 'getConditional',\n        value: function getConditional(id) {\n            for (var key in this.conditionals) {\n                if (this.conditionals[key].id === id) {\n                    return this.conditionals[key];\n                }\n            }\n\n            return false;\n        }\n    }, {\n        key: 'getConditionals',\n        value: function getConditionals() {\n            return this.conditionals;\n        }\n    }, {\n        key: '_getNodes',\n        value: function _getNodes(node) {\n            var _this2 = this;\n\n            if (!node) {\n                var html = $.parseHTML($.trim(this.template));\n                var node = html ? html[0] : [];\n            }\n\n            $.each(node.childNodes, function (i, el) {\n                if (el.childNodes.length > 0) {\n                    _this2.nodes.push(el);\n                    _this2._getNodes(el);\n                }\n            });\n        }\n    }, {\n        key: '_removeRootElement',\n        value: function _removeRootElement() {\n            this.template = $(this.template).unwrap().html();\n        }\n    }, {\n        key: '_removeListItemMarkup',\n        value: function _removeListItemMarkup() {\n            this.template = this.template.replace(\"<li>\" + this.listItem + \"</li>\", \"{{ suggestion_list }}\");\n        }\n    }, {\n        key: 'replaceHandlebars',\n        value: function replaceHandlebars(str, name, replace) {\n\n            return str.replace(new RegExp(\"@?{{\\\\s?\" + name + \"\\\\s?}}\", \"gi\"), replace);\n        }\n    }, {\n        key: 'getParsedTemplate',\n        value: function getParsedTemplate() {\n            return this.template;\n        }\n    }, {\n        key: 'getListItemMarkup',\n        value: function getListItemMarkup() {\n            return this.listItem;\n        }\n    }, {\n        key: 'setDebug',\n        value: function setDebug(debug) {\n            this.debug = debug;\n        }\n    }]);\n\n    return TemplateParser;\n}();\n\nexports.default = TemplateParser;\n\n},{\"./util.js\":12}],6:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _util = require(\"./util.js\");\n\nvar _util2 = _interopRequireDefault(_util);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Typeahead = function () {\n    function Typeahead(suggestions, searchBy) {\n        _classCallCheck(this, Typeahead);\n\n        this.suggestions = suggestions;\n        this.searchBy = searchBy;\n    }\n\n    _createClass(Typeahead, [{\n        key: \"setCurrentInput\",\n        value: function setCurrentInput(currentInput) {\n            this.currentInput = currentInput;\n        }\n    }, {\n        key: \"getTypeahead\",\n        value: function getTypeahead(selectedItemIndex) {\n            // If the suggestion box has an item selected get the item at that index instead.\n            var index = selectedItemIndex > -1 ? selectedItemIndex : 0;\n            var suggestion = this.suggestions.getSuggestions()[index] || \"\";\n\n            suggestion = (typeof suggestion === \"undefined\" ? \"undefined\" : _typeof(suggestion)) == \"object\" ? suggestion[this.searchBy] : suggestion;\n\n            var regex = new RegExp(\"^\" + this.currentInput, \"i\");\n            // Simply match the case of the typeahead to the case the user typed\n            var typeahead = suggestion.replace(regex, this.currentInput);\n\n            return typeahead;\n        }\n    }, {\n        key: \"removeTypeahead\",\n        value: function removeTypeahead() {\n            this.updateTypeahead(\"\");\n        }\n    }, {\n        key: \"updateTypeaheadPosition\",\n        value: function updateTypeaheadPosition(inputEl) {\n\n            var top = _util2.default.getCssValue(inputEl, 'padding-top') + _util2.default.getCssValue(inputEl, 'border-top-width') + _util2.default.getCssValue(inputEl, 'top');\n            var left = _util2.default.getCssValue(inputEl, 'padding-left') + _util2.default.getCssValue(inputEl, 'border-left-width') + inputEl.position().left;\n\n            $(\"#suggestion-box-dynamic-typeahead\").html('#suggestion-box-typeahead::after{left:' + left + 'px;top:' + top + 'px;}');\n        }\n    }, {\n        key: \"updateTypeahead\",\n        value: function updateTypeahead(value) {\n            $(\"#suggestion-box-typeahead\").attr('data-placeholder', value);\n        }\n    }, {\n        key: \"setSearchBy\",\n        value: function setSearchBy(searchBy) {\n            this.searchBy = searchBy;\n        }\n    }]);\n\n    return Typeahead;\n}();\n\nexports.default = Typeahead;\n\n},{\"./util.js\":12}],7:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = {\n    'ENTER_KEY': 13,\n    'UP_ARROW_KEY': 38,\n    'DOWN_ARROW_KEY': 40,\n    'ESCAPE_KEY': 27\n};\n\n},{}],8:[function(require,module,exports){\n'use strict';\n\nvar _suggestionBox = require('./suggestionBox.js');\n\nvar _suggestionBox2 = _interopRequireDefault(_suggestionBox);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(function ($) {\n    $.fn.suggestionBox = function (options) {\n        // Get the bound dom element\n        var domElement = $(this).get()[0];\n\n        var suggestionBox = $.data(domElement, 'suggestionBox');\n\n        if (!suggestionBox) {\n            suggestionBox = new _suggestionBox2.default(options, this);\n            $.data(domElement, 'suggestionBox', suggestionBox);\n        }\n\n        return suggestionBox;\n    };\n})(jQuery);\n\n},{\"./suggestionBox.js\":10}],9:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = {\n    data: [],\n    template: '',\n    searchBy: 'suggestion',\n    url: '',\n    sort: function sort() {},\n    topOffset: 0,\n    leftOffset: 0,\n    widthAdjustment: 0,\n    adjustBorderRadius: true,\n    zIndex: 10000,\n    hideOnExactMatch: false,\n    loadImage: \"/dist/images/loading.gif\",\n    fetchAfter: 1000,\n    fetchEvery: -1, // in ms\n    fetchOnce: false,\n    prefetch: false,\n    results: 10,\n    widthType: 'width', // Pass a css width attr (i.e. 'width', 'min-width')\n    showNoSuggestionsMessage: false,\n    noSuggestionsMessage: 'No Suggestions Found',\n    filter: \"^{{INPUT}}\",\n    typeahead: false,\n    highlightMatch: false,\n    paramName: 'search',\n    scrollable: false,\n    debug: false,\n    ajaxError: function ajaxError() {},\n    ajaxSuccess: function ajaxSuccess() {},\n    loading: function loading() {},\n    completed: function completed() {},\n    onClick: function onClick(value, obj, event, inputEl, selectedEl) {\n        inputEl.val(value);\n        /*        console.log(value);\r\n                console.log(obj);\r\n                console.log(event);\r\n                console.log(inputEl);\r\n                console.log(selectedEl);*/\n    },\n    onShow: function onShow() {},\n    onHide: function onHide() {}\n    //height: 50\n};\n\n},{}],10:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _SuggestionList = require('./SuggestionList.js');\n\nvar _SuggestionList2 = _interopRequireDefault(_SuggestionList);\n\nvar _util = require('./util.js');\n\nvar _util2 = _interopRequireDefault(_util);\n\nvar _keys = require('./constants/keys.js');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _Anubis = require('./Anubis.js');\n\nvar _Anubis2 = _interopRequireDefault(_Anubis);\n\nvar _TemplateParser = require('./TemplateParser.js');\n\nvar _TemplateParser2 = _interopRequireDefault(_TemplateParser);\n\nvar _Typeahead = require('./Typeahead.js');\n\nvar _Typeahead2 = _interopRequireDefault(_Typeahead);\n\nvar _Suggestions = require('./Suggestions.js');\n\nvar _Suggestions2 = _interopRequireDefault(_Suggestions);\n\nvar _options = require('./options.js');\n\nvar _options2 = _interopRequireDefault(_options);\n\nvar _template = require('./template.js');\n\nvar _template2 = _interopRequireDefault(_template);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar SuggestionBox = function () {\n    function SuggestionBox(options, context) {\n        _classCallCheck(this, SuggestionBox);\n\n        this.context = context;\n\n        this.search = this.context.val();\n\n        this._defaults = JSON.parse(JSON.stringify(_options2.default));\n\n        this.options = $.extend(_options2.default, options);\n\n        this.perpetualFetch = this.options.fetchEvery !== -1 ? true : false;\n        this.fetchRate = this.options.fetchAfter;\n        this.endFetch = false;\n        this.pending = false;\n\n        this._checkFilterForTypeahead();\n        // load default template into options \n        this.templateParser = this._buildTemplate();\n\n        this._initAnubis();\n\n        this.suggestions = new _Suggestions2.default();\n\n        this.typeahead = new _Typeahead2.default(this.suggestions, this.options.searchBy);\n        this.suggestionList = new _SuggestionList2.default(this.context, this.templateParser, this.options, this.typeahead, this.suggestions);\n\n        this.context.on('keyup', this._keyupEvents.bind(this));\n        this.context.on('blur', this._blurEvents.bind(this));\n        this.context.on('focus', this._focusEvents.bind(this));\n        this.context.on('keydown', this._keydownEvents.bind(this));\n        this.context.on('paste', this._pasteEvents.bind(this));\n\n        // Set up typeahead option\n        this._initTypeahead();\n        this.autocomplete = this.context.attr('autocomplete');\n\n        this.context.attr('autocomplete', 'off');\n\n        this.radiusDefaults = {\n            bottomLeft: _util2.default.getCssValue(this.context, 'border-bottom-right-radius'),\n            bottomRight: _util2.default.getCssValue(this.context, 'border-bottom-right-radius')\n        };\n\n        // Preload the loading image if it has been supplied so it loads faster!\n        if (this.options.loadImage) {\n            $('<img/>')[0].src = this.options.loadImage;\n        }\n\n        // If we are prefetching our data\n        if (this.options.prefetch) {\n            this.updateSuggestions(this.context.val(), true);\n        }\n    }\n\n    /*\r\n     * Updates the suggestion list\r\n     * @param search - The search string for finding suggestions\r\n     * @param forceFetch -   set to true to fetch suggestions regardless of input (used internally for prefetching)\r\n     */\n\n\n    _createClass(SuggestionBox, [{\n        key: 'updateSuggestions',\n        value: function updateSuggestions(search, forceFetch) {\n            var _this = this;\n\n            this.anubis.setSearch(search);\n\n            if (search == \"\" && !forceFetch) {\n                this.anubis.clearLastSearch();\n                this.hideSuggestions();\n            } else {\n                if (this.options.url.length > 0 && !this.pending && (this.anubis.getLastSearch().length > search.length || this.anubis.getLastSearch().length === 0) && !this.endFetch || this.perpetualFetch) {\n\n                    this.anubis.setSearch(search);\n                    this.pending = true;\n                    this.context.css('background', \"url('\" + this.options.loadImage + \"') no-repeat 99% 50%\");\n\n                    setTimeout(function () {\n                        _this.loadSuggestionData(forceFetch);\n                    }, this.fetchRate);\n\n                    this.endFetch = this.options.fetchOnce;\n\n                    if (this.perpetualFetch) {\n                        // make sure we continue to filter\n                        this.suggestionList.show();\n                        this.fetchRate = this.options.fetchEvery;\n                    }\n                } else {\n                    this.showSuggestions();\n                }\n            }\n        }\n\n        /*\r\n         * loads the suggestion data from the server\r\n         * @param forceFetch - set to true to force the fetch (used for prefetch when search value is empty)\r\n         */\n\n    }, {\n        key: 'loadSuggestionData',\n        value: function loadSuggestionData(forceFetch) {\n            // Don't bother fetching data we already have again\n            if (this.anubis.getLastSearch() !== this.anubis.getSearch() || forceFetch) {\n                this.anubis.fetchSuggestions(this.options.url, this._fetchSuggestionsCallback());\n            } else {\n                this.context.css('background', \"\");\n                this.pending = false;\n            }\n        }\n    }, {\n        key: 'showSuggestions',\n        value: function showSuggestions() {\n            // Set the suggesation (SuggestionList holds a reference to this object)\n            this.suggestions.setSuggestions(this.anubis.getSuggestions());\n\n            if (this.suggestions.getSuggestions().length > 0) {\n\n                var borders = _util2.default.calculateVerticalBorderWidth(this.context);\n                var padding = _util2.default.calculateVerticalPadding(this.context);\n                var offset = this.context.offset();\n\n                this.suggestionList.updatePosition(offset.left + this.options.leftOffset, offset.top + (this.context.height() + borders + padding + this.options.topOffset));\n                this.suggestionList.setWidth(this.getSearchBoxWidth() + this.options.widthAdjustment);\n\n                this.typeahead.updateTypeaheadPosition(this.context);\n\n                if (this.options.adjustBorderRadius) {\n                    this._applyBorderRadius(0, 0);\n                }\n\n                this.suggestionList.show();\n            } else {\n                this.hideSuggestions();\n            }\n        }\n\n        /**\r\n         * Returns the width of the search box\r\n         * @returns {number}\r\n         */\n\n    }, {\n        key: 'getSearchBoxWidth',\n        value: function getSearchBoxWidth() {\n            return this.context.width() + _util2.default.getCssValue(this.context, 'border-left-width') + _util2.default.getCssValue(this.context, 'border-right-width') + _util2.default.getCssValue(this.context, 'padding-left') + _util2.default.getCssValue(this.context, 'padding-right');\n        }\n    }, {\n        key: 'hideSuggestions',\n        value: function hideSuggestions() {\n            console.log('hide');\n            this._applyBorderRadius(this.radiusDefaults.bottomLeft, this.radiusDefaults.bottomRight);\n            this.typeahead.removeTypeahead();\n            this.suggestionList.hide();\n            this.suggestions.setSuggestions([]);\n        }\n\n        /**\r\n         * The actions to perform when data has been successfully fetched from the server\r\n         */\n\n    }, {\n        key: '_fetchSuggestionsCallback',\n        value: function _fetchSuggestionsCallback() {\n            var _this2 = this;\n\n            return function (data) {\n                _this2.anubis.setData(data);\n\n                // Only show if a selection was not made while wating for a response\n                if (!_this2.suggestionList.isSuggestionChosen() && _this2.anubis.getSearch().length > 0) {\n                    _this2.showSuggestions();\n                } else {\n                    _this2.hideSuggestions();\n                }\n\n                _this2.suggestionList.setIsSuggestionChosen(false);\n                _this2.pending = false;\n\n                _this2.context.css('background', \"\");\n            };\n        }\n\n        /*\r\n         * Applies the give border-radius to the search input, used when diosplaying suggestion list\r\n         * with an input that has a border radius.\r\n         */\n\n    }, {\n        key: '_applyBorderRadius',\n        value: function _applyBorderRadius(left, right) {\n            this.context.css('border-bottom-left-radius', left);\n            this.context.css('border-bottom-right-radius', right);\n        }\n    }, {\n        key: '_checkFilterForTypeahead',\n        value: function _checkFilterForTypeahead() {\n            if (this.options.filter !== \"^{{INPUT}}\" && this.options.typeahead) {\n                _util2.default.logger(this.options.debug, 'Using a custom filter pattern with the typeahed option can cause unexpected results', 'warn');\n            }\n        }\n\n        /**\r\n         *  Destroy the suggestionBox\r\n         */\n\n    }, {\n        key: 'destroy',\n        value: function destroy() {\n            // Remove reference to this suggestionBox instance from data\n            $.removeData(this.context.get()[0], 'suggestionBox');\n\n            // remove event handlers\n            this.context.unbind('keyup');\n            this.context.unbind('blur');\n            this.context.unbind('focus');\n            this.context.unbind('keydown');\n            this.context.unbind('paste');\n\n            // destroy the suggestionList\n            this.suggestionList.destroy();\n\n            // remove typeahead\n            this.context.unwrap(\"#suggestion-box-typeahead\");\n            // remove injected typeahed css\n            $(\"#suggestion-box-dynamic-typeahead\").remove();\n\n            // reset autocomplete to it's initial value\n            this.context.attr('autocomplete', this.autocomplete);\n\n            // delete class instances\n            delete this.anubis;\n            delete this.typeahead;\n            delete this.suggestionList;\n\n            // Remove the loading spinner\n            this.context.css('background', \"\");\n\n            // reset default options, $.extend overwrites defaultOptions which are global, \n            // so re-overwrite the ones set here to the orignal defaults.\n            $.extend(_options2.default, this._defaults);\n        }\n    }, {\n        key: '_buildTemplate',\n        value: function _buildTemplate() {\n            var template = _util2.default.isId(this.options.template) ? $(this.options.template).html() : this.options.template;\n            template = !template ? _template2.default : template;\n            return new _TemplateParser2.default(template, this.options.debug);\n        }\n\n        /**\r\n         *  Returns the Anubis object\r\n         */\n\n    }, {\n        key: 'getAnubis',\n        value: function getAnubis() {\n            return this.anubis;\n        }\n    }, {\n        key: 'setAnubis',\n        value: function setAnubis(anubis) {\n            this.anubis = anubis;\n        }\n    }, {\n        key: 'getSuggestionList',\n        value: function getSuggestionList() {\n            return this.suggestionList;\n        }\n    }, {\n        key: 'setSuggestionList',\n        value: function setSuggestionList(suggestionList) {\n            this.suggestionList = suggestionList;\n        }\n    }, {\n        key: 'getTypeahead',\n        value: function getTypeahead() {\n            return this.typeahead;\n        }\n    }, {\n        key: 'setTypeahead',\n        value: function setTypeahead(typeahead) {\n            this.typeahead = typeahead;\n        }\n    }, {\n        key: 'getTemplateParser',\n        value: function getTemplateParser() {\n            return this.templateParser;\n        }\n    }, {\n        key: 'setTemplateParser',\n        value: function setTemplateParser(templateParser) {\n            this.templateParser = templateParser;\n        }\n    }, {\n        key: '_initAnubis',\n        value: function _initAnubis() {\n            this.anubis = new _Anubis2.default(this.options.searchBy, this.options.filter, this.options.sort, this.options.paramName);\n\n            this.anubis.setData(this.options.data);\n            this.anubis.setDebug(this.options.debug);\n        }\n    }, {\n        key: '_initTypeahead',\n        value: function _initTypeahead() {\n            if (this.options.typeahead) {\n                this.context.wrap('<div id=\"suggestion-box-typeahead\" data-placeholder=\"\"></div>');\n                var top = _util2.default.getCssValue(this.context, 'padding-top') + _util2.default.getCssValue(this.context, 'border-top-width');\n                var left = _util2.default.getCssValue(this.context, 'padding-left') + _util2.default.getCssValue(this.context, 'border-left-width');\n                $(\"head\").append('<style id=\"suggestion-box-dynamic-typeahead\">#suggestion-box-typeahead::after{left:' + left + 'px;top:' + top + 'px;}</style>');\n            }\n        }\n\n        /**\r\n         * Clears the last suggestion and updates the suggestions list, useful for `ctrl+v` paste\r\n         * when a user highlights the current text and pastes new text over the top.\r\n         * @param search - The new search for the suggestion list\r\n         */\n\n    }, {\n        key: 'clearAndUpdate',\n        value: function clearAndUpdate(search) {\n            this.hideSuggestions();\n            this.anubis.clearLastSearch();\n            this.updateSuggestions(search, false);\n        }\n    }, {\n        key: 'getSuggestions',\n        value: function getSuggestions() {\n            this.updateSuggestions(this.context.val(), false);\n        }\n    }, {\n        key: 'updateTypeahead',\n        value: function updateTypeahead() {\n            if (this.context.val() !== \"\") {\n                var selectedIndex = this.suggestionList.getSelectedItemIndex();\n\n                this.typeahead.setCurrentInput(this.context.val());\n                var value = this.typeahead.getTypeahead(selectedIndex);\n\n                this.typeahead.updateTypeahead(value, this.context.val());\n            }\n        }\n    }, {\n        key: '_setData',\n        value: function _setData(data) {\n            this.options.data = data;\n            this.anubis.setData(data);\n        }\n    }, {\n        key: '_setSearchBy',\n        value: function _setSearchBy(searchBy) {\n            this.options.searchBy = searchBy;\n            this.anubis.setSearchBy(searchBy);\n\n            this.typeahead.setSearchBy(searchBy);\n        }\n    }, {\n        key: '_setFilter',\n        value: function _setFilter(filter) {\n            this.options.filter = filter;\n            this.anubis.setFilter(filter);\n            this._checkFilterForTypeahead();\n        }\n    }, {\n        key: '_setSort',\n        value: function _setSort(sort) {\n            this.options.sort = sort;\n            this.anubis.setSort(sort);\n        }\n    }, {\n        key: '_setTemplate',\n        value: function _setTemplate(template) {\n            this.options.template = template;\n            this.templateParser = this._buildTemplate();\n            this.suggestionList.setTemplate(this.templateParser);\n        }\n    }, {\n        key: '_setDebug',\n        value: function _setDebug(debug) {\n            this.options.debug = debug;\n            this.templateParser.setDebug(debug);\n        }\n    }, {\n        key: 'set',\n        value: function set(name, value) {\n            // check if a function exists to set this option, and map the request, otherwise just set it as normal\n            var funcName = '_set' + name.charAt(0).toUpperCase() + name.slice(1);\n            if (typeof this[funcName] === \"function\") {\n                this[funcName].call(this, value);\n            } else {\n                this.options[name] = value;\n                this.suggestionList.buildDom();\n                this._checkFilterForTypeahead();\n            }\n        }\n    }, {\n        key: 'getOptions',\n        value: function getOptions() {\n            return this.options;\n        }\n    }, {\n        key: '_keyupEvents',\n        value: function _keyupEvents(e) {\n            if (!this._isReservedKey(e)) {\n                this.getSuggestions();\n                this.updateTypeahead();\n                this.suggestionList.setIsSuggestionChosen(false);\n            }\n        }\n    }, {\n        key: '_keydownEvents',\n        value: function _keydownEvents(e) {\n\n            if (e.which == _keys2.default.DOWN_ARROW_KEY) {\n                e.preventDefault();\n                this.suggestionList.moveDown(true);\n                this.getSuggestions();\n                this.updateTypeahead();\n                this.showSuggestions();\n            }\n            if (this.suggestionList.isOpen()) {\n                if (e.which == _keys2.default.UP_ARROW_KEY) {\n                    e.preventDefault();\n                    this.suggestionList.moveUp(true);\n                    this.updateTypeahead();\n                }\n                if (e.which === _keys2.default.ENTER_KEY) {\n                    e.preventDefault();\n                    this.suggestionList.doClick(e);\n                }\n                if (e.which == _keys2.default.ESCAPE_KEY) {\n                    e.preventDefault();\n                    this.context.css('background', \"\");\n                    this.hideSuggestions();\n                }\n            }\n        }\n\n        /**\r\n         * Events for when the search box is focused\r\n         */\n\n    }, {\n        key: '_focusEvents',\n        value: function _focusEvents() {\n            this.getSuggestions();\n        }\n\n        /**\r\n         * Events for when the search box loses focus\r\n         */\n\n    }, {\n        key: '_blurEvents',\n        value: function _blurEvents() {\n            if (!this.suggestionList.isHovering()) {\n                this.context.css('background', \"\");\n                this.hideSuggestions();\n            }\n        }\n\n        /**\r\n         * Events for when text is pasted in to the search box\r\n         */\n\n    }, {\n        key: '_pasteEvents',\n        value: function _pasteEvents() {\n            var _this3 = this;\n\n            // Simulate keyup after 200ms otherwise the value of the search box will not be available\n            setTimeout(function () {\n                _this3.clearAndUpdate(_this3.context.val());\n            }, 200);\n        }\n    }, {\n        key: '_isReservedKey',\n        value: function _isReservedKey(e) {\n            return _util2.default.inObject(e.which, _keys2.default);\n        }\n    }]);\n\n    return SuggestionBox;\n}();\n\nexports.default = SuggestionBox;\n\n},{\"./Anubis.js\":1,\"./SuggestionList.js\":3,\"./Suggestions.js\":4,\"./TemplateParser.js\":5,\"./Typeahead.js\":6,\"./constants/keys.js\":7,\"./options.js\":9,\"./template.js\":11,\"./util.js\":12}],11:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n            value: true\n});\nvar template = '<div>' + '<ul id=\"suggestion-list\" class=\"suggestion-box-list\">' + '<li>' + '<a href=\"#\">{{suggestion}}</a>' + '</li>' + '</ul>' + '</div>';\n\nexports.default = template;\n\n},{}],12:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Util = function () {\n    function Util() {\n        _classCallCheck(this, Util);\n    }\n\n    _createClass(Util, null, [{\n        key: 'getCssValue',\n        value: function getCssValue(el, name) {\n            var value = parseInt(el.css(name).replace('px', ''));\n            return isNaN(value) ? 0 : value;\n        }\n\n        /** Calculates the padding for the given elements**/\n\n    }, {\n        key: 'calculateVerticalPadding',\n        value: function calculateVerticalPadding(el) {\n            return Util.getCssValue(el, 'padding-bottom') + Util.getCssValue(el, 'padding-top');\n        }\n    }, {\n        key: 'calculateVerticalBorderWidth',\n        value: function calculateVerticalBorderWidth(el) {\n            return Util.getCssValue(el, 'border-bottom-width') + Util.getCssValue(el, 'border-top-width');\n        }\n    }, {\n        key: 'calculateHorizontalBorders',\n        value: function calculateHorizontalBorders(el) {\n            return Util.getCssValue(el, 'border-left-width') + Util.getCssValue(el, 'border-right-width');\n        }\n    }, {\n        key: 'copyArray',\n        value: function copyArray(arr) {\n            return arr.splice(0);\n        }\n    }, {\n        key: 'logger',\n        value: function logger(debug, message, type) {\n            if (debug) {\n                if (type === 'error') {\n                    console.log('%c[Suggestion-Box Error] ' + message, 'color: #f00');\n                } else {\n                    console.log('[suggestion-box ' + type + '] ' + message);\n                }\n            }\n        }\n\n        /**\r\n         * Returns true if the given search is found in the given object;\r\n         */\n\n    }, {\n        key: 'inObject',\n        value: function inObject(search, obj) {\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) continue;\n\n                if (obj[key] == search) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n    }, {\n        key: 'isId',\n        value: function isId(str) {\n            return str.charAt(0) == \"#\";\n        }\n    }, {\n        key: 'logError',\n        value: function logError(error) {\n            console.log(error);\n        }\n    }]);\n\n    return Util;\n}();\n\nexports.default = Util;\n\n},{}]},{},[8]);\n"],"file":"main.js"}