{"version":3,"names":[],"mappings":"","sources":["main.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\nvar _typeof2 = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\" ? function (obj) {\n    return typeof obj === \"undefined\" ? \"undefined\" : _typeof2(obj);\n} : function (obj) {\n    return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof2(obj);\n};\n\nvar _createClass = function () {\n    function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n        }\n    }return function (Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n    };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n\nvar Anubis = function () {\n    function Anubis(searchBy, regexPattern, sort) {\n        _classCallCheck(this, Anubis);\n\n        this.searchBy = searchBy;\n        this.regex = regexPattern;\n        this.sort = sort;\n        this.search = \"\";\n        this.debug = false; // flag for showing debug messages from ajax call\n        this.lastSearch = \"\";\n        console.log(this.regex);\n    }\n\n    _createClass(Anubis, [{\n        key: \"setDebug\",\n        value: function setDebug(debug) {\n            this.debug = debug;\n        }\n    }, {\n        key: \"setData\",\n        value: function setData(data) {\n            this.data = data;\n        }\n    }, {\n        key: \"getSuggestions\",\n        value: function getSuggestions() {\n            return this.filterData();\n        }\n    }, {\n        key: \"setSearch\",\n        value: function setSearch(search) {\n            // Escape any regex patterns is search string\n            var santizedSearch = search.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n            this.search = santizedSearch;\n        }\n    }, {\n        key: \"filterData\",\n        value: function filterData() {\n            var _this = this;\n\n            var filterPattern = this.regex.replace('{{INPUT}}', this.search);\n            var regex = new RegExp(filterPattern, \"i\");\n            var results = [];\n\n            if (this.data && this.search.length > 0) {\n                results = $.grep(this.data, function (item) {\n                    return (typeof item === \"undefined\" ? \"undefined\" : _typeof(item)) === \"object\" ? regex.test(item[_this.searchBy]) : regex.test(item);\n                });\n            }\n\n            // results = this.sortData(results)\n\n            return results;\n        }\n    }, {\n        key: \"sortData\",\n        value: function sortData(data) {\n            if ((typeof item === \"undefined\" ? \"undefined\" : _typeof(item)) === \"object\") {\n                return data;\n            }\n            return data.sort(this.sort);\n        }\n\n        /*            if (context.val() != \"\") {\r\n                        ajaxCalledVal = context.val();\r\n                          console.log('calling bg');\r\n                          if (options.loadImage != null) {\r\n                            context.css('background', \"url('\"+options.loadImage+\"') no-repeat 99% 50%\");\r\n                        }\r\n                          $.ajax({\r\n                            url: url,\r\n                            data: request,\r\n                            dataType: 'json',\r\n                            success: function(data) {\r\n                                var selectionHasChanged = true;\r\n                                var currentLi = selectedLi;\r\n                                  if (jsonData.suggestions && data.suggestions) {\r\n                                    selectionHasChanged = (JSON.stringify(jsonData.suggestions[selectedLi]) !== JSON.stringify(data.suggestions[selectedLi]))\r\n                                }\r\n                                  setJsonData(data);\r\n                                showSuggestions();\r\n                                  // Keep selection if no new information has been entered since ajax was called and the selection is the same.\r\n                                // This prevents the flick back effect when menu has the same data but the ajax hasn't finished.\r\n                                if (currentLi > -1 && (context.val() === ajaxCalledVal) && !selectionHasChanged) {\r\n                                    selectedLi = currentLi;\r\n                                    select(selectedLi);\r\n                                }\r\n                                  setTimeout(function(){\r\n                                   context.css('background', \"\");\r\n                               },500);\r\n                                  options.ajaxSuccess(data);\r\n                            },\r\n                            error: function(e) {\r\n                                options.ajaxError(e);\r\n                            }\r\n                        });*/\n\n    }, {\n        key: \"getLastSearch\",\n        value: function getLastSearch() {\n            return this.lastSearch;\n        }\n    }, {\n        key: \"clearLastSearch\",\n        value: function clearLastSearch() {\n            this.lastSearch = \"\";\n        }\n\n        // Fetches suggestions from the given url\n\n    }, {\n        key: \"fetchSuggestions\",\n        value: function fetchSuggestions(url, callback) {\n            var _this2 = this;\n\n            // Don't maka a call for an empty search string or while another request is still processing\n\n            this.lastSearch = this.search;\n            console.log('searching for ' + this.search);\n\n            if (this.xhr != undefined) {\n                this.xhr.abort();\n            }\n\n            this.xhr = $.ajax({\n                url: url,\n                method: 'get',\n                dataType: 'json',\n                data: { search: this.search }\n            }).done(callback).fail(function (data) {\n                if (_this2.debug) {\n                    console.log('[Ajax Error]:' + data);\n                }\n            });\n        }\n    }], [{\n        key: \"factory\",\n        value: function factory() {\n            return new Anubis('suggestion', '{{INPUT}}');\n        }\n    }]);\n\n    return Anubis;\n}();\n\nexports.default = Anubis;\n\n},{}],2:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar _typeof2 = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\" ? function (obj) {\n    return typeof obj === \"undefined\" ? \"undefined\" : _typeof2(obj);\n} : function (obj) {\n    return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof2(obj);\n};\n\nvar _createClass = function () {\n    function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n        }\n    }return function (Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n    };\n}();\n\nvar _util = require('./util');\n\nvar _util2 = _interopRequireDefault(_util);\n\nvar _TemplateParser = require('./TemplateParser');\n\nvar _TemplateParser2 = _interopRequireDefault(_TemplateParser);\n\nvar _Anubis = require('./Anubis');\n\nvar _Anubis2 = _interopRequireDefault(_Anubis);\n\nvar _jQuery = (typeof window !== \"undefined\" ? window['jQuery'] : typeof global !== \"undefined\" ? global['jQuery'] : null);\n\nvar _jQuery2 = _interopRequireDefault(_jQuery);\n\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n\n/*\r\n/ @class SuggestionListDropdown - builds the SuggestionList Dom object\r\n*/\n\nvar SuggestionListDropdown = function () {\n    function SuggestionListDropdown(inputEl, template, options) {\n        _classCallCheck(this, SuggestionListDropdown);\n\n        this.inputEl = inputEl;\n        this.template = template;\n\n        this.templateParser = new _TemplateParser2.default(template);\n        this.anubis = new _Anubis2.default(options.props.value, options.filter, options.sort);\n\n        this.options = options;\n\n        // Whether or not the scroll action was done pragmatically\n        this.autoScrolled = false;\n\n        // REMOVE THIS ONCE OFFSET IMPLEMENTED\n        this.topOffset = 0;\n        this.leftOffset = 0;\n\n        this.radiusDefaults = {\n            bottomLeft: _util2.default.getCssValue(this.inputEl, 'border-bottom-right-radius'),\n            bottomRight: _util2.default.getCssValue(this.inputEl, 'border-bottom-right-radius')\n        };\n\n        this.selectedLi = -1; // Nothing selected\n        this.setRandId();\n        this._buildDom();\n\n        // Bind Events\n        this.$suggestionBox.on('mousemove', this.mousemoveEvents.bind(this));\n        this.$suggestionBox.on('mouseout', this.mouseoutEvents.bind(this));\n        this.$suggestionBox.on('click', this.clickEvents.bind(this));\n    }\n\n    _createClass(SuggestionListDropdown, [{\n        key: '_buildDom',\n        value: function _buildDom() {\n            this.$suggestionBox = (0, _jQuery2.default)('<div id=\"' + this.randId + '\" class=\"suggestion-box\"></div>').appendTo('body');\n            if (this.options.height) {\n                this.$suggestionBox.css('max-height', this.options.height);\n            }\n\n            if (this.options.scrollable) {\n                this.$suggestionBox.css('overflow', 'auto');\n            }\n        }\n    }, {\n        key: 'updateSuggestions',\n        value: function updateSuggestions(search) {\n            var _this = this;\n\n            this.anubis.setSearch(search);\n\n            if (search == \"\") {\n                this.anubis.clearLastSearch();\n                this.hide();\n            } else {\n                if (!this.pending && (this.anubis.getLastSearch().length > search.length || this.anubis.getLastSearch().length === 0)) {\n                    this.anubis.setSearch(search);\n                    this.pending = true;\n                    this.inputEl.css('background', \"url('\" + this.options.loadImage + \"') no-repeat 99% 50%\");\n\n                    setTimeout(function () {\n                        _this.loadSuggestionData();\n                    }, 2000);\n                } else {\n                    this.show();\n                }\n            }\n        }\n    }, {\n        key: 'loadSuggestionData',\n        value: function loadSuggestionData() {\n            var _this2 = this;\n\n            this.anubis.fetchSuggestions(this.options.url, function (data) {\n                _this2.anubis.setData(data);\n                // Only show if a selection was not made while wating for a response\n                if (!_this2.selectionMade) {\n                    _this2.show();\n                } else {\n                    console.log('interrupted');\n                }\n                _this2.selectionMade = false;\n                _this2.pending = false;\n\n                _this2.inputEl.css('background', \"\");\n            });\n        }\n\n        /* Update the position of the suggestionList */\n\n    }, {\n        key: 'updatePosition',\n        value: function updatePosition() {\n            // Calculates the vertical padding and broder for the input box so the list isn't placed over the top.\n            var borders = _util2.default.calculateVerticalBorderWidth(this.inputEl);\n            var padding = _util2.default.calculateVerticalPadding(this.inputEl);\n            var offset = this.inputEl.offset();\n\n            this.$suggestionBox.css({\n                'position': 'absolute',\n                'zIndex': this.options.zIndex,\n                'left': offset.left + this.leftOffset,\n                'top': offset.top + (this.inputEl.height() + borders + padding + this.topOffset)\n            });\n        }\n\n        /*\r\n         * Show the suggestion box\r\n         */\n\n    }, {\n        key: 'show',\n        value: function show() {\n            this.updatePosition();\n            this.setWidth();\n            this.renderSuggestionsList();\n\n            if (this.options.adjustBorderRadius) {\n                this._applyBorderRadius(0, 0);\n            }\n\n            this.$suggestionBox.fadeIn();\n            //console.log(this.$suggestionBox.html());\n        }\n    }, {\n        key: '_applyBorderRadius',\n        value: function _applyBorderRadius(left, right) {\n            this.inputEl.css('border-bottom-left-radius', left);\n            this.inputEl.css('border-bottom-right-radius', right);\n        }\n\n        /**\r\n         * Sets the width of the suggestion box\r\n         */\n\n    }, {\n        key: 'setWidth',\n        value: function setWidth() {\n            var searchBoxWidth = this.getSearchBoxWidth();\n            this.$suggestionBox.css({\n                'min-width': searchBoxWidth\n            });\n\n            /*       let searchBoxWidth = this.getSearchBoxWidth() + options.widthAdjustment;\r\n                      if (options.menuWidth == 'auto') {\r\n                        $suggestionBox.css({\r\n                            'min-width': searchBoxWidth\r\n                        });\r\n                    } else if (options.menuWidth == 'constrain') {\r\n                        $suggestionBox.css({\r\n                            'width': searchBoxWidth\r\n                        });\r\n                    }*/\n        }\n\n        /**\r\n         * Returns the width of the search box\r\n         * @returns {number}\r\n         */\n\n    }, {\n        key: 'getSearchBoxWidth',\n        value: function getSearchBoxWidth() {\n            return this.inputEl.width() + _util2.default.getCssValue(this.inputEl, 'border-left-width') + _util2.default.getCssValue(this.inputEl, 'border-right-width') + _util2.default.getCssValue(this.inputEl, 'padding-left') + _util2.default.getCssValue(this.inputEl, 'padding-right');\n        }\n\n        /*\r\n         * Hide the suggestion box\r\n         */\n\n    }, {\n        key: 'hide',\n        value: function hide() {\n            this.selectedLi = -1;\n            console.log('hide');\n            this._applyBorderRadius(this.radiusDefaults.bottomLeft, this.radiusDefaults.bottomRight);\n            this.$suggestionBox.css('display', 'none');\n        }\n    }, {\n        key: 'renderSuggestionsList',\n        value: function renderSuggestionsList() {\n            var _this3 = this;\n\n            var heading = 'Suggestions';\n            var suggestions = this.anubis.getSuggestions().slice(0, this.options.results);\n\n            var template = this.templateParser.getParsedTemplate();\n            template = this.templateParser.replaceHandlebars(template, \"header\", heading);\n\n            var listItemMarkup = this.templateParser.getListItemMarkup();\n            var listMarkup = \"\";\n\n            suggestions.forEach(function (item) {\n                var suggestion = (typeof item === 'undefined' ? 'undefined' : _typeof(item)) == \"object\" ? item.suggestion : item;\n                var markup = _this3.templateParser.replaceHandlebars(listItemMarkup, \"suggestion\", suggestion);\n                markup = _this3.templateParser.replaceHandlebars(markup, \"url\", \"#\");\n\n                listMarkup += \"<li>\";\n                listMarkup += markup;\n                listMarkup += \"</li>\";\n            });\n\n            var suggestionMarkup = this.templateParser.replaceHandlebars(template, \"suggestion_list\", listMarkup);\n\n            this.$suggestionBox.html(suggestionMarkup);\n        }\n\n        /**\r\n         * Selects the suggestion at the given position\r\n         * @param position\r\n         * @param scroll\r\n         */\n\n    }, {\n        key: 'select',\n        value: function select(position, scroll) {\n            this.selectedHref = this.$suggestionBox.find(\"li:eq(\" + position + \") a\").attr('href');\n            this.$suggestionBox.find(\"li:eq(\" + position + \")\").addClass('selected');\n\n            if (scroll) {\n                this.doScroll(position);\n            }\n        }\n    }, {\n        key: 'isOpen',\n        value: function isOpen() {\n            return this.$suggestionBox.css('display') !== 'none';\n        }\n\n        /**\r\n         * Scrolls the suggestion box to the given position\r\n         * @param to\r\n         */\n\n    }, {\n        key: 'doScroll',\n        value: function doScroll(to) {\n            this.autoScrolled = true;\n\n            if (to > -1) {\n                var pos = this.$suggestionBox.find('li:eq(' + to + ')').position().top - this.$suggestionBox.find('li:eq(0)').position().top;\n            }\n\n            // find scroll position at to and set scroll bars to it\n            var scrollTo = to > -1 ? pos : 0;\n            this.$suggestionBox.scrollTop(scrollTo);\n        }\n\n        /**\r\n         * Unselects the suggestion at the given position\r\n         * @param position\r\n         */\n\n    }, {\n        key: 'unselect',\n        value: function unselect(position) {\n            this.$suggestionBox.find(\"li:eq(\" + position + \")\").removeClass('selected');\n        }\n\n        /**\r\n         * Events for the mouse moving inside the suggestion box\r\n         * @param e\r\n         */\n\n    }, {\n        key: 'mousemoveEvents',\n        value: function mousemoveEvents(e) {\n            if (this.isSuggestion(e) && !this.autoScrolled) {\n                this.unselect(this.selectedLi);\n                this.selectedLi = this.getSelectionMouseIsOver(e);\n                this.select(this.selectedLi);\n            }\n\n            this.mouseHover = true;\n            this.autoScrolled = false;\n        }\n\n        /**\r\n         * Moves the selection down to the next suggestion\r\n         */\n\n    }, {\n        key: 'moveDown',\n        value: function moveDown(scroll) {\n            var listSize = this.$suggestionBox.find('li').length;\n\n            if (!this.isOpen() && this.anubis.getSuggestions().length > 0) {\n                this.show();\n            } else if (this.selectedLi === listSize - 1) {\n                this.unselect(this.selectedLi);\n                this.resetSelection();\n            } else {\n                this.unselect(this.selectedLi);\n                this.selectedLi++;\n                this.select(this.selectedLi);\n            }\n\n            if (scroll) {\n                this.doScroll(this.selectedLi);\n            }\n        }\n\n        /**\r\n         * Moves the selection up to the previous suggestions\r\n         */\n\n    }, {\n        key: 'moveUp',\n        value: function moveUp(scroll) {\n            if (this.selectedLi > 0) {\n                this.unselect(this.selectedLi);\n                this.selectedLi--;\n                this.select(this.selectedLi);\n            } else if (this.selectedLi == -1) {\n                this.unselect(this.selectedLi);\n                this.selectedLi = this.$suggestionBox.find('li').length - 1;\n                this.select(this.selectedLi);\n            } else {\n                this.unselect(0);\n                this.resetSelection();\n            }\n\n            if (scroll) {\n                this.doScroll(this.selectedLi);\n            }\n        }\n\n        /**\r\n         * Returns the index of the list item the mouse is currently hovering over\r\n         * @param e\r\n         * @returns {Number}\r\n         */\n\n    }, {\n        key: 'getSelectionMouseIsOver',\n        value: function getSelectionMouseIsOver(e) {\n            var $parentLi = (0, _jQuery2.default)(e.target).parents('li');\n\n            return $parentLi.parent().children().index($parentLi);\n        }\n\n        /**\r\n         * Events for when the mouse leaves the suggestion box\r\n         * @param e\r\n         */\n\n    }, {\n        key: 'mouseoutEvents',\n        value: function mouseoutEvents(e) {\n            if (this.isSuggestion(e) && !this.autoScrolled) {\n                this.unselect(this.selectedLi);\n                this.resetSelection();\n            } else if ((0, _jQuery2.default)(':focus').attr('id') !== this.inputEl.attr('id')) {\n                // We're out of the suggestion box so re-focus on search\n                this.inputEl.focus();\n            }\n            this.mouseHover = false;\n        }\n\n        /**\r\n         * Events for clicks inside the suggestion box\r\n         * @param e\r\n         */\n\n    }, {\n        key: 'clickEvents',\n        value: function clickEvents(e) {\n            if (this.isSuggestion(e)) {\n                e.preventDefault();\n                this.doClick(e);\n            }\n        }\n\n        /*\r\n         * Returns true if the mouse is over the dropdown list\r\n         */\n\n    }, {\n        key: 'isHovering',\n        value: function isHovering() {\n            return this.mouseHover;\n        }\n\n        /**\r\n         * Performs the click action, this can be called for any event you want to recreate a click action for.\r\n         * @param e\r\n         */\n\n    }, {\n        key: 'doClick',\n        value: function doClick(e) {\n            e.preventDefault();\n\n            if (this.pending) {\n                this.selectionMade = true;\n            }\n\n            var selectionText = this.$suggestionBox.find('li:eq(' + this.selectedLi + ')').text();\n            this.options.onClick(e, selectionText, this.selectedHref, this.inputEl);\n            this.hide();\n        }\n    }, {\n        key: 'simulateClick',\n        value: function simulateClick() {\n            if (this.selectedLi > -1) {\n                this.$suggestionBox.find('.selected a').click();\n            }\n        }\n\n        /**\r\n         * Is the given event made on a suggestion?\r\n         * @param e\r\n         * @returns {boolean}\r\n         */\n\n    }, {\n        key: 'isSuggestion',\n        value: function isSuggestion(e) {\n            return (0, _jQuery2.default)(e.target).parents('a').length > 0 || e.target.nodeName === 'A';\n        }\n\n        /**\r\n         * Resets any selected suggestions\r\n         */\n\n    }, {\n        key: 'resetSelection',\n        value: function resetSelection() {\n            this.selectedHref = '#';\n            this.selectedLi = -1;\n            // remove all selected on reset\n            this.$suggestionBox.find('li').removeClass('selected');\n        }\n    }, {\n        key: 'setRandId',\n        value: function setRandId() {\n            this.Id = 'suggestion-box-' + Math.floor(Math.random() * 10000000);\n        }\n    }]);\n\n    return SuggestionListDropdown;\n}();\n\nexports.default = SuggestionListDropdown;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./Anubis\":1,\"./TemplateParser\":3,\"./util\":8}],3:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () {\n    function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n        }\n    }return function (Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n    };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n\nvar TemplateParser = function () {\n    function TemplateParser(template) {\n        _classCallCheck(this, TemplateParser);\n\n        this.template = template;\n        this._getTemplateForListItem();\n        this._removeListItemMarkup();\n        this._removeRootElement();\n    }\n\n    _createClass(TemplateParser, [{\n        key: '_getTemplateForListItem',\n        value: function _getTemplateForListItem() {\n            var listItem = \"\";\n\n            var html = $.parseHTML($.trim(this.template));\n\n            if (html.length !== 1) {\n                console.log('%c[Suggestion-Box:Error] Unable to parse template. Template must have one root element.', 'color: #f00');\n            }\n            var el = html[0];\n            if (el.id !== \"\" || el.class !== undefined) {\n                console.log('%c[Suggestion-Box:warn] Avoid adding style attributes such as \"class\", \"id\" or \"style\" to root element in template because these tags will be stripped.', 'color: #f00');\n            }\n\n            if (el.childNodes.length > 0) {\n                $.each(el.childNodes, function (i, el) {\n                    if (el.id == \"suggestion-list\") {\n                        $.each(el.childNodes, function (i, el) {\n                            if (el.nodeName == \"LI\") {\n                                listItem = el.innerHTML;\n                            }\n                        });\n                    }\n                });\n            }\n\n            this.listItem = listItem;\n        }\n    }, {\n        key: '_removeRootElement',\n        value: function _removeRootElement() {\n            this.template = $(this.template).unwrap().html();\n        }\n    }, {\n        key: '_removeListItemMarkup',\n        value: function _removeListItemMarkup() {\n            this.template = this.template.replace(\"<li>\" + this.listItem + \"</li>\", \"{{ suggestion_list }}\");\n        }\n    }, {\n        key: 'replaceHandlebars',\n        value: function replaceHandlebars(str, name, replace) {\n            return str.replace(new RegExp(\"@?{{\\\\s?\" + name + \"\\\\s?}}\", \"gi\"), replace);\n        }\n    }, {\n        key: 'getParsedTemplate',\n        value: function getParsedTemplate() {\n            return this.template;\n        }\n    }, {\n        key: 'getListItemMarkup',\n        value: function getListItemMarkup() {\n            return this.listItem;\n        }\n    }]);\n\n    return TemplateParser;\n}();\n\nexports.default = TemplateParser;\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = {\n    'ENTER_KEY': 13,\n    'UP_ARROW_KEY': 38,\n    'DOWN_ARROW_KEY': 40,\n    'ESCAPE_KEY': 27\n};\n\n},{}],5:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar _jQuery = (typeof window !== \"undefined\" ? window['jQuery'] : typeof global !== \"undefined\" ? global['jQuery'] : null);\n\nvar _jQuery2 = _interopRequireDefault(_jQuery);\n\nvar _suggestionBox = require('./suggestion-box.js');\n\nvar _suggestionBox2 = _interopRequireDefault(_suggestionBox);\n\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n}\n\n(function ($) {\n    $.fn.suggestionBox = function (options) {\n        // Get the bound dom element\n        var domElement = $(this).get()[0];\n\n        var args = $.makeArray(arguments);\n        var suggestionBox = $.data(domElement, 'suggestionBox');\n\n        if (suggestionBox) {\n            suggestionBox.set(args[0], args[1]);\n        } else {\n            suggestionBox = new _suggestionBox2.default(options, this);\n            $.data(domElement, 'suggestionBox', suggestionBox);\n        }\n\n        return suggestionBox;\n    };\n})(jQuery);\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./suggestion-box.js\":7}],6:[function(require,module,exports){\n'use strict';\n\nvar _module$exports;\n\nfunction _defineProperty(obj, key, value) {\n   if (key in obj) {\n      Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n   } else {\n      obj[key] = value;\n   }return obj;\n}\n\nmodule.exports = (_module$exports = {\n   data: [],\n   template: '#suggestion-box-template',\n   props: {\n      value: 'suggestion',\n      url: 'url',\n      custom: []\n   },\n   sort: function sort() {},\n   topOffset: 0,\n   leftOffset: 0,\n   zIndex: 10000,\n   hideOnExactMatch: false,\n   isSelectionBox: false,\n   loadImage: \"/dist/images/loading.gif\",\n   widthAdjustment: 10,\n   fetchAfter: 500,\n   fetchEvery: 1000, // in ms\n   fetchOnce: false,\n   heading: 'Suggestions',\n   results: 10,\n   menuWidth: 'auto',\n   showNoSuggestionsMessage: false,\n   noSuggestionsMessage: 'No Suggestions Found',\n   filter: \"{{INPUT}}\",\n   highlightMatch: false,\n   adjustBorderRadius: true,\n   ajaxError: function ajaxError() {},\n   ajaxSuccess: function ajaxSuccess() {},\n   onClick: function onClick(e, value, href, input) {\n      input.val(value);\n   },\n   onShow: function onShow() {},\n   onHide: function onHide() {},\n   paramName: 'search'\n}, _defineProperty(_module$exports, 'sort', function sort(a, b) {\n   return a.localeCompare(b);\n}), _defineProperty(_module$exports, 'customData', []), _defineProperty(_module$exports, 'scrollable', false), _defineProperty(_module$exports, 'noConflict', false), _defineProperty(_module$exports, 'debug', true), _module$exports);\n\n},{}],7:[function(require,module,exports){\n(function (global){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () {\n    function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n        }\n    }return function (Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n    };\n}();\n\nvar _jQuery = (typeof window !== \"undefined\" ? window['jQuery'] : typeof global !== \"undefined\" ? global['jQuery'] : null);\n\nvar _jQuery2 = _interopRequireDefault(_jQuery);\n\nvar _SuggestionListDropdown = require('./SuggestionListDropdown.js');\n\nvar _SuggestionListDropdown2 = _interopRequireDefault(_SuggestionListDropdown);\n\nvar _util = require('./util.js');\n\nvar _util2 = _interopRequireDefault(_util);\n\nvar _keys = require('./constants/keys.js');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _Anubis = require('./Anubis.js');\n\nvar _Anubis2 = _interopRequireDefault(_Anubis);\n\nvar _options = require('./options.js');\n\nvar _options2 = _interopRequireDefault(_options);\n\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n\nvar SuggestionBox = function () {\n    function SuggestionBox(options, context) {\n        _classCallCheck(this, SuggestionBox);\n\n        this.context = context;\n\n        this.search = this.context.val();\n        this.suggestions = [];\n\n        this.options = _jQuery2.default.extend(_options2.default, options);\n\n        this.fetchRate = this.options.fetchAfter;\n        // this.perpetualFetch = (this.options.fetchEvery != -1) ? true : false;\n        // get loaddefault template into options \n        var template = _util2.default.isId(this.options.template) ? (0, _jQuery2.default)(this.options.template).html() : this.options.template;\n\n        this.dropdown = new _SuggestionListDropdown2.default(this.context, template, this.options);\n        this.anubis = new _Anubis2.default(this.options.props.value, this.options.filter, this.options.sort);\n        this.anubis.setData(this.options.data);\n\n        this.context.on('keyup', this.keyupEvents.bind(this));\n        this.context.on('blur', this.blurEvents.bind(this));\n        this.context.on('focus', this.focusEvents.bind(this));\n        this.context.on('keydown', this.keydownEvents.bind(this));\n        this.context.on('paste', this.pasteEvents.bind(this));\n\n        // Preload the loading image if it has been supplied so it loads faster!\n        if (this.options.loadImage) {\n            (0, _jQuery2.default)('<img/>')[0].src = this.options.loadImage;\n        }\n    }\n\n    _createClass(SuggestionBox, [{\n        key: 'getSuggestions',\n        value: function getSuggestions() {\n            this.dropdown.updateSuggestions(this.context.val());\n        }\n    }, {\n        key: 'keyupEvents',\n        value: function keyupEvents(e) {\n            if (!this._isReservedKey(e)) {\n                this.getSuggestions();\n            }\n        }\n    }, {\n        key: 'keydownEvents',\n        value: function keydownEvents(e) {\n            if (e.which == _keys2.default.DOWN_ARROW_KEY) {\n                e.preventDefault();\n                this.dropdown.moveDown(true);\n            }\n            if (this.dropdown.isOpen()) {\n                if (e.which == _keys2.default.UP_ARROW_KEY) {\n                    e.preventDefault();\n                    this.dropdown.moveUp(true);\n                }\n                if (e.which === _keys2.default.ENTER_KEY) {\n                    e.preventDefault();\n                    this.dropdown.simulateClick();\n                }\n                if (e.which == _keys2.default.ESCAPE_KEY) {\n                    e.preventDefault();\n                    this.context.css('background', \"\");\n                    this.dropdown.hide();\n                }\n            }\n        }\n\n        /**\r\n         * Events for when the search box is focused\r\n         */\n\n    }, {\n        key: 'focusEvents',\n        value: function focusEvents() {\n            this.getSuggestions(false);\n\n            if (this.suggestions.length > 0) {\n                this.dropdown.show();\n            }\n        }\n\n        /**\r\n         * Events for when the search box loses focus\r\n         */\n\n    }, {\n        key: 'blurEvents',\n        value: function blurEvents() {\n            if (!this.dropdown.isHovering()) {\n                this.context.css('background', \"\");\n                this.dropdown.hide();\n            }\n        }\n\n        /**\r\n         * Events for when text is pasted in to the search box\r\n         */\n\n    }, {\n        key: 'pasteEvents',\n        value: function pasteEvents() {\n            var _this = this;\n\n            // Simulate keyup after 200ms otherwise the value of the search box will not be available\n            setTimeout(function () {\n                _this.context.keyup();\n            }, 200);\n        }\n    }, {\n        key: '_isReservedKey',\n        value: function _isReservedKey(e) {\n            return _util2.default.inObject(e.which, _keys2.default);\n        }\n    }]);\n\n    return SuggestionBox;\n}();\n\nexports.default = SuggestionBox;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./Anubis.js\":1,\"./SuggestionListDropdown.js\":2,\"./constants/keys.js\":4,\"./options.js\":6,\"./util.js\":8}],8:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () {\n    function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n        }\n    }return function (Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n    };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n\nvar Util = function () {\n    function Util() {\n        _classCallCheck(this, Util);\n    }\n\n    _createClass(Util, null, [{\n        key: 'getCssValue',\n        value: function getCssValue(el, name) {\n            return parseInt(el.css(name).replace('px', ''));\n        }\n\n        /** Calculates the padding for the given elements**/\n\n    }, {\n        key: 'calculateVerticalPadding',\n        value: function calculateVerticalPadding(el) {\n            return Util.getCssValue(el, 'padding-bottom') + Util.getCssValue(el, 'padding-top');\n        }\n    }, {\n        key: 'calculateVerticalBorderWidth',\n        value: function calculateVerticalBorderWidth(el) {\n            return Util.getCssValue(el, 'border-bottom-width') + Util.getCssValue(el, 'border-top-width');\n        }\n    }, {\n        key: 'calculateHorizontalBorders',\n        value: function calculateHorizontalBorders(el) {\n            return Util.getCssValue(el, 'border-left-width') + Util.getCssValue(el, 'border-right-width');\n        }\n    }, {\n        key: 'copyArray',\n        value: function copyArray(arr) {\n            return arr.splice(0);\n        }\n\n        /**\r\n         * Returns true if the given search is found in the given object;\r\n         */\n\n    }, {\n        key: 'inObject',\n        value: function inObject(search, obj) {\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) continue;\n\n                if (obj[key] == search) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n    }, {\n        key: 'isId',\n        value: function isId(str) {\n            return str.charAt(0) == \"#\";\n        }\n    }, {\n        key: 'logError',\n        value: function logError(error) {\n            console.log(error);\n        }\n    }]);\n\n    return Util;\n}();\n\nexports.default = Util;\n\n},{}]},{},[5]);\n"],"file":"main.js"}