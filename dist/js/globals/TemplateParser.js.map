{"version":3,"names":[],"mappings":"","sources":["TemplateParser.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _util = require('./util.js');\n\nvar _util2 = _interopRequireDefault(_util);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar TemplateParser = function () {\n    function TemplateParser(template, debug) {\n        _classCallCheck(this, TemplateParser);\n\n        this.debug = debug || false;\n        this.template = template;\n        this.nodes = [];\n        this.conditionals = [];\n\n        this._getNodes();\n        this._getConditionals();\n        this._getTemplateForListItem();\n        this._removeListItemMarkup();\n        this._removeRootElement();\n    }\n\n    _createClass(TemplateParser, [{\n        key: '_getTemplateForListItem',\n        value: function _getTemplateForListItem() {\n            var listItem = \"\";\n\n            var html = $.parseHTML($.trim(this.template));\n            var el = html ? html[0] : [];\n\n            if (html.length !== 1 && this.debug) {\n                _util2.default.logger(this.debug, 'Unable to parse template. Template must have one root element.', 'error');\n            }\n\n            if ((el.id !== \"\" || el.class !== undefined) && this.debug) {\n                _util2.default.logger(this.debug, 'Avoid adding style attributes such as \"class\", \"id\" or \"style\" to root element in template because these tags will be stripped.', 'warn');\n            }\n\n            if (el.childNodes.length > 0) {\n                $.each(el.childNodes, function (i, el) {\n                    if (el.id === \"suggestion-list\") {\n                        $.each(el.childNodes, function (i, el) {\n                            if (el.nodeName === \"LI\") {\n                                listItem = el.innerHTML;\n                            }\n                        });\n                    }\n                });\n            }\n\n            this.listItem = listItem;\n        }\n\n        // returns an arroy of names for items that are inside handlebars\n\n    }, {\n        key: 'getTemplatedItems',\n        value: function getTemplatedItems(str) {\n            var regex = new RegExp(\"@?{{\\\\s?[a-z0-9_-]+\\\\s?}}\", \"ig\");\n            var items = str.match(regex);\n\n            var itemNames = [];\n\n            items.forEach(function (item) {\n                item = item.replace(new RegExp(\"@?{{\\\\s?\"), \"\");\n                item = item.replace(new RegExp(\"\\\\s?}}\"), \"\");\n                itemNames.push(item);\n            });\n\n            return itemNames;\n        }\n    }, {\n        key: '_getConditionals',\n        value: function _getConditionals() {\n            var _this = this;\n\n            this.nodes.forEach(function (node) {\n                if (node.attributes.length > 0) {\n                    for (var i = 0; i < node.attributes.length; i++) {\n                        if (node.attributes[i].nodeName === \"sb-show\") {\n                            var id = $(node).attr('id') || 'sb' + Math.floor(Math.random() * 10000000);\n\n                            // Add the id to the template\n                            _this.template = _this.template.replace($(node)[0].outerHTML, $(node).attr('id', id)[0].outerHTML);\n                            _this.conditionals.push({ 'id': id });\n                        }\n                    }\n                }\n            });\n        }\n    }, {\n        key: 'getConditional',\n        value: function getConditional(id) {\n            for (var key in this.conditionals) {\n                if (this.conditionals[key].id === id) {\n                    return this.conditionals[key];\n                }\n            }\n\n            return false;\n        }\n    }, {\n        key: 'getConditionals',\n        value: function getConditionals() {\n            return this.conditionals;\n        }\n    }, {\n        key: '_getNodes',\n        value: function _getNodes(node) {\n            var _this2 = this;\n\n            if (!node) {\n                var html = $.parseHTML($.trim(this.template));\n                var node = html ? html[0] : [];\n            }\n\n            $.each(node.childNodes, function (i, el) {\n                if (el.childNodes.length > 0) {\n                    _this2.nodes.push(el);\n                    _this2._getNodes(el);\n                }\n            });\n        }\n    }, {\n        key: '_removeRootElement',\n        value: function _removeRootElement() {\n            this.template = $(this.template).unwrap().html();\n        }\n    }, {\n        key: '_removeListItemMarkup',\n        value: function _removeListItemMarkup() {\n            this.template = this.template.replace(\"<li>\" + this.listItem + \"</li>\", \"{{ suggestion_list }}\");\n        }\n    }, {\n        key: 'replaceHandlebars',\n        value: function replaceHandlebars(str, name, replace) {\n\n            return str.replace(new RegExp(\"@?{{\\\\s?\" + name + \"\\\\s?}}\", \"gi\"), replace);\n        }\n    }, {\n        key: 'getParsedTemplate',\n        value: function getParsedTemplate() {\n            return this.template;\n        }\n    }, {\n        key: 'getListItemMarkup',\n        value: function getListItemMarkup() {\n            return this.listItem;\n        }\n    }, {\n        key: 'setDebug',\n        value: function setDebug(debug) {\n            this.debug = debug;\n        }\n    }]);\n\n    return TemplateParser;\n}();\n\nexports.default = TemplateParser;\n\n},{\"./util.js\":3}],2:[function(require,module,exports){\n'use strict';\n\nwindow.TemplateParser = require('../TemplateParser.js').default;\n\n},{\"../TemplateParser.js\":1}],3:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Util = function () {\n    function Util() {\n        _classCallCheck(this, Util);\n    }\n\n    _createClass(Util, null, [{\n        key: 'getCssValue',\n        value: function getCssValue(el, name) {\n            var value = parseInt(el.css(name).replace('px', ''));\n            return isNaN(value) ? 0 : value;\n        }\n\n        /** Calculates the padding for the given elements**/\n\n    }, {\n        key: 'calculateVerticalPadding',\n        value: function calculateVerticalPadding(el) {\n            return Util.getCssValue(el, 'padding-bottom') + Util.getCssValue(el, 'padding-top');\n        }\n    }, {\n        key: 'calculateVerticalBorderWidth',\n        value: function calculateVerticalBorderWidth(el) {\n            return Util.getCssValue(el, 'border-bottom-width') + Util.getCssValue(el, 'border-top-width');\n        }\n    }, {\n        key: 'calculateHorizontalBorders',\n        value: function calculateHorizontalBorders(el) {\n            return Util.getCssValue(el, 'border-left-width') + Util.getCssValue(el, 'border-right-width');\n        }\n    }, {\n        key: 'copyArray',\n        value: function copyArray(arr) {\n            return arr.splice(0);\n        }\n    }, {\n        key: 'logger',\n        value: function logger(debug, message, type) {\n            if (debug) {\n                if (type === 'error') {\n                    console.log('%c[Suggestion-Box Error] ' + message, 'color: #f00');\n                } else {\n                    console.log('[suggestion-box ' + type + '] ' + message);\n                }\n            }\n        }\n\n        /*\r\n         * Applies the give border-radius to the search input, used when diosplaying suggestion list\r\n         * with an input that has a border radius.\r\n         */\n\n    }, {\n        key: 'applyBorderRadius',\n        value: function applyBorderRadius(el, left, right) {\n            el.css('border-bottom-left-radius', left);\n            el.css('border-bottom-right-radius', right);\n        }\n\n        /**\r\n         * Returns true if the given search is found in the given object;\r\n         */\n\n    }, {\n        key: 'inObject',\n        value: function inObject(search, obj) {\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) continue;\n\n                if (obj[key] == search) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n    }, {\n        key: 'isId',\n        value: function isId(str) {\n            return str.charAt(0) == \"#\";\n        }\n    }, {\n        key: 'logError',\n        value: function logError(error) {\n            console.log(error);\n        }\n    }]);\n\n    return Util;\n}();\n\nexports.default = Util;\n\n},{}]},{},[2]);\n"],"file":"TemplateParser.js"}