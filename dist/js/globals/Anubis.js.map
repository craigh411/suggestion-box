{"version":3,"names":[],"mappings":"","sources":["Anubis.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _util = require('./util.js');\n\nvar _util2 = _interopRequireDefault(_util);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Anubis = function () {\n    function Anubis(searchBy, filter, sort, param, customParams, root, ajaxErrorEvent) {\n        _classCallCheck(this, Anubis);\n\n        this.searchBy = searchBy;\n        this.filter = filter;\n        this.sort = sort;\n        this.search = \"\";\n        this.customParams = customParams || {};\n        this.param = param || 'search';\n        this.lastSearch = \"\";\n        this.root = root || \"\";\n        this.ajaxErrorEvent = ajaxErrorEvent || 'suggestion-box.ajax.error';\n    }\n\n    _createClass(Anubis, [{\n        key: 'setDataRoot',\n        value: function setDataRoot(root) {\n            this.root = root;\n        }\n    }, {\n        key: 'getDataRoot',\n        value: function getDataRoot() {\n            return this.root;\n        }\n    }, {\n        key: 'setData',\n        value: function setData(data) {\n            if (this.root.length > 0) {\n                var dataRoot = this.root.split(\".\");\n                // Set the data at the given root\n                for (var i = 0; i < dataRoot.length; i++) {\n                    data = data[dataRoot[i]] ? data[dataRoot[i]] : [];\n                }\n            }\n\n            this.data = data;\n        }\n    }, {\n        key: 'getData',\n        value: function getData() {\n            return this.data;\n        }\n    }, {\n        key: 'setSearchBy',\n        value: function setSearchBy(searchBy) {\n            this.searchBy = searchBy;\n        }\n    }, {\n        key: 'getSearchBy',\n        value: function getSearchBy() {\n            return this.searchBy;\n        }\n    }, {\n        key: 'setCustomParams',\n        value: function setCustomParams(params) {\n            this.customParams = params;\n        }\n    }, {\n        key: 'getCustomParams',\n        value: function getCustomParams() {\n            return this.customParams;\n        }\n    }, {\n        key: 'getSuggestions',\n        value: function getSuggestions() {\n            return this.filterData();\n        }\n    }, {\n        key: 'setSearch',\n        value: function setSearch(search) {\n            // Escape any regex patterns as search string\n            var santizedSearch = search.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n            this.search = santizedSearch;\n        }\n    }, {\n        key: 'getSearch',\n        value: function getSearch() {\n            return this.search;\n        }\n    }, {\n        key: 'setFilter',\n        value: function setFilter(filter) {\n            this.filter = filter;\n        }\n    }, {\n        key: 'getFilter',\n        value: function getFilter() {\n            return this.filter;\n        }\n    }, {\n        key: 'setSort',\n        value: function setSort(sort) {\n            this.sort = sort;\n        }\n    }, {\n        key: 'getSort',\n        value: function getSort() {\n            return this.sort;\n        }\n    }, {\n        key: 'getSearchParam',\n        value: function getSearchParam() {\n            var searchBy = this.searchBy.split(\".\");\n            return typeof searchBy === \"String\" ? searchBy : searchBy[searchBy.length - 1];\n        }\n    }, {\n        key: 'filterData',\n        value: function filterData() {\n            var _this = this;\n\n            var filterPattern = this.filter.replace('{{INPUT}}', this.search);\n            var regex = new RegExp(filterPattern, \"i\");\n            var results = [];\n\n            if (this.data && this.search.length > 0) {\n                results = $.grep(this.data, function (item) {\n                    if ((typeof item === 'undefined' ? 'undefined' : _typeof(item)) === \"object\") {\n                        var searchData = _util2.default.getValueByStringAttributes(_this.searchBy, item);\n\n                        for (var i = 0; i <= searchData.length; i++) {\n                            if (regex.test(searchData[i])) {\n                                return true;\n                            }\n                        }\n\n                        return false;\n                    }\n\n                    return regex.test(item);\n                });\n            }\n\n            results = this.sortData(results);\n\n            return results;\n        }\n    }, {\n        key: 'sortData',\n        value: function sortData(data) {\n            return data.sort(this.sort);\n        }\n    }, {\n        key: 'getParam',\n        value: function getParam() {\n            return this.param;\n        }\n    }, {\n        key: 'setParam',\n        value: function setParam(param) {\n            this.param = param;\n        }\n    }, {\n        key: 'getLastSearch',\n        value: function getLastSearch() {\n            return this.lastSearch;\n        }\n    }, {\n        key: 'clearLastSearch',\n        value: function clearLastSearch() {\n            this.lastSearch = \"\";\n        }\n    }, {\n        key: 'killCurrentFetch',\n        value: function killCurrentFetch() {\n            if (this.xhr != undefined) {\n                this.xhr.abort();\n            }\n        }\n\n        /* \r\n         * Fetches suggestions from the given url\r\n         * @param {string} url - The url to retrieve suggestion data from\r\n         * @param {function} callback - The actions to perform on successfull fetch\r\n         */\n\n    }, {\n        key: 'fetchSuggestions',\n        value: function fetchSuggestions(url, callback) {\n            var _this2 = this;\n\n            this.lastSearch = this.search;\n\n            // Kill any current ajax connections.\n            this.killCurrentFetch();\n            // Set up the search param\n            var request = this.customParams;\n            request[this.param] = this.search;\n\n            this.xhr = $.ajax({\n                url: url,\n                method: 'get',\n                dataType: 'json',\n                data: request,\n                success: callback\n            });\n\n            if (this.xhr) {\n                this.xhr.fail(function (data) {\n                    // fire an ajax error event on failure with the error data\n                    $.event.trigger(_this2.ajaxErrorEvent, data);\n                });\n            }\n        }\n    }]);\n\n    return Anubis;\n}();\n\nexports.default = Anubis;\n\n},{\"./util.js\":3}],2:[function(require,module,exports){\n'use strict';\n\nwindow.Anubis = require('../Anubis.js').default;\n\n},{\"../Anubis.js\":1}],3:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Util = function () {\n    function Util() {\n        _classCallCheck(this, Util);\n    }\n\n    _createClass(Util, null, [{\n        key: 'getCssValue',\n        value: function getCssValue(el, name) {\n            var value = parseInt(el.css(name).replace('px', ''));\n            return isNaN(value) ? 0 : value;\n        }\n\n        /** Calculates the padding for the given elements**/\n\n    }, {\n        key: 'calculateVerticalPadding',\n        value: function calculateVerticalPadding(el) {\n            return Util.getCssValue(el, 'padding-bottom') + Util.getCssValue(el, 'padding-top');\n        }\n    }, {\n        key: 'calculateVerticalBorderWidth',\n        value: function calculateVerticalBorderWidth(el) {\n            return Util.getCssValue(el, 'border-bottom-width') + Util.getCssValue(el, 'border-top-width');\n        }\n    }, {\n        key: 'calculateHorizontalBorders',\n        value: function calculateHorizontalBorders(el) {\n            return Util.getCssValue(el, 'border-left-width') + Util.getCssValue(el, 'border-right-width');\n        }\n    }, {\n        key: 'copyArray',\n        value: function copyArray(arr) {\n            return arr.splice(0);\n        }\n    }, {\n        key: 'logger',\n        value: function logger(debug, message, type) {\n            if (debug) {\n                if (type === 'error') {\n                    console.log('%c[Suggestion-Box Error] ' + message, 'color: #f00');\n                } else {\n                    console.log('[suggestion-box ' + type + '] ' + message);\n                }\n            }\n        }\n\n        /*\r\n         * Applies the give border-radius to the search input, used when diosplaying suggestion list\r\n         * with an input that has a border radius.\r\n         */\n\n    }, {\n        key: 'applyBorderRadius',\n        value: function applyBorderRadius(el, left, right) {\n            el.css('border-bottom-left-radius', left);\n            el.css('border-bottom-right-radius', right);\n        }\n\n        /*\r\n         * Retuns the value at the given attribute. An attribute can look like: 'artists[0].name'\r\n         * @param {string} attrs - The string attributes you want to get the value for.\r\n         * @param {array} data - the data to search\r\n         * @retun {array} - An array of results for the given query\r\n         */\n\n    }, {\n        key: 'getValueByStringAttributes',\n        value: function (_getValueByStringAttributes) {\n            function getValueByStringAttributes(_x, _x2) {\n                return _getValueByStringAttributes.apply(this, arguments);\n            }\n\n            getValueByStringAttributes.toString = function () {\n                return _getValueByStringAttributes.toString();\n            };\n\n            return getValueByStringAttributes;\n        }(function (attrs, data) {\n            attrs = Array.isArray(attrs) ? attrs : attrs.split(\".\");\n            if (data !== undefined) {\n                for (var i = 0; i < attrs.length; i++) {\n                    if (Array.isArray(data)) {\n                        var vals = [];\n                        for (var j = 0; j < data.length; j++) {\n                            var value = data[j][attrs[i]]; // The value at the given array\n                            if (attrs.length - 1 > i) {\n                                // Recursively retrieve values at the next key and add them to the array\n                                vals = vals.concat(getValueByStringAttributes(attrs[i + 1], value));\n                            } else {\n                                // We have no more keys for this object, so add this to the array\n                                vals.push(data[j][attrs[i]]);\n                            }\n                        }\n                        return vals;\n                    } else {\n                        var arrayItem = attrs[i].split('[');\n                        if (arrayItem.length === 1) {\n                            data = data[arrayItem[0]];\n                        } else {\n                            var index = arrayItem[1].replace(']', '');\n                            var attr = arrayItem[0];\n\n                            data = data[attr][index];\n                        }\n                    }\n                }\n            }\n\n            return Array.isArray(data) ? data : [data];\n        })\n\n        /**\r\n         * Returns true if the given search is found in the given object;\r\n         */\n\n    }, {\n        key: 'inObject',\n        value: function inObject(search, obj) {\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) continue;\n\n                if (obj[key] == search) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n    }, {\n        key: 'isId',\n        value: function isId(str) {\n            return str.charAt(0) == \"#\";\n        }\n    }]);\n\n    return Util;\n}();\n\nexports.default = Util;\n\n},{}]},{},[2]);\n"],"file":"Anubis.js"}